// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/terminal.react.svg

/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error';
  size?: 'small' | 'medium' | 'big' | 'scale';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
} as const;

const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };

    case 'small':
    case 'medium':
    case 'big':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };

    default:
      return {
        width: `${iconSizes.big}px`,
        height: `${iconSizes.big}px`,
      };
  }
};

const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);

  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;

    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};

const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;

  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;

    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;

    case 'surface':
      iconColor = designTokens.colorSurface;
      break;

    case 'info':
      iconColor = designTokens.colorInfo;
      break;

    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;

    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;

    case 'warning':
      iconColor = designTokens.colorWarning;
      break;

    case 'error':
      iconColor = designTokens.colorError;
      break;

    default:
      break;
  }

  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }

  return iconColor;
};

export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;

const SvgTerminal = (props: SVGProps) => (
  <svg
    width={24}
    height={24}
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
    role="img"
    {...props}
  >
    <path d="M12.9 16.7a.869.869 0 0 1-.64-.26.869.869 0 0 1-.26-.64c0-.255.086-.469.26-.642a.87.87 0 0 1 .64-.258h3.6a.87.87 0 0 1 .64.258c.174.173.26.387.26.642a.869.869 0 0 1-.26.64.869.869 0 0 1-.64.26h-3.6Zm-5.58-.63a.853.853 0 0 1-.248-.63c0-.255.083-.465.248-.63l1.688-1.71-1.71-1.71a.823.823 0 0 1-.259-.63c.007-.24.101-.45.281-.63a.951.951 0 0 1 .63-.26c.24-.006.45.08.63.26l2.34 2.34c.09.09.154.188.192.292.037.105.056.218.056.338 0 .12-.02.232-.056.338a.795.795 0 0 1-.192.292l-2.34 2.34a.877.877 0 0 1-.618.258.837.837 0 0 1-.642-.258ZM4.8 19.4c-.495 0-.919-.176-1.27-.528A1.734 1.734 0 0 1 3 17.6V6.8c0-.495.176-.919.53-1.27C3.88 5.175 4.304 5 4.8 5h14.4c.495 0 .919.176 1.272.53.352.351.528.775.528 1.27v10.8c0 .495-.176.919-.528 1.272a1.736 1.736 0 0 1-1.272.528H4.8Zm0-1.8h14.4v-9H4.8v9Z" />
  </svg>
);

SvgTerminal.displayName = 'SvgTerminal';

const TerminalIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgTerminal {...props} className={createClass(getIconStyles(props))} />
    )}
  </ClassNames>
);

TerminalIcon.displayName = 'TerminalIcon';
export default TerminalIcon;

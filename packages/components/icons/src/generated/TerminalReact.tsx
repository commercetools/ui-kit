// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/terminal.react.svg

/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error';
  size?: 'small' | 'medium' | 'big' | 'scale';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
} as const;

const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };

    case 'small':
    case 'medium':
    case 'big':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };

    default:
      return {
        width: `${iconSizes.big}px`,
        height: `${iconSizes.big}px`,
      };
  }
};

const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);

  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;

    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};

const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;

  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;

    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;

    case 'surface':
      iconColor = designTokens.colorSurface;
      break;

    case 'info':
      iconColor = designTokens.colorInfo;
      break;

    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;

    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;

    case 'warning':
      iconColor = designTokens.colorWarning;
      break;

    case 'error':
      iconColor = designTokens.colorError;
      break;

    default:
      break;
  }

  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }

  return iconColor;
};

export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;

const SvgTerminal = (props: SVGProps) => (
  <svg
    width={24}
    height={24}
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <g fillRule="evenodd" fill="#1A1A1A">
      <path d="m5.753 13.405 2.796-2.75a.427.427 0 0 1 .612 0 .41.41 0 0 1 0 .602l-2.49 2.448 2.49 2.449a.41.41 0 0 1 0 .601.435.435 0 0 1-.306.13.435.435 0 0 1-.306-.13l-2.796-2.727a.42.42 0 0 1-.131-.301.47.47 0 0 1 .13-.322Zm4.413 2.856 3.015-5.498c.11-.215.372-.28.59-.172.219.108.284.365.175.58l-3.015 5.498a.461.461 0 0 1-.393.237c-.066 0-.131-.022-.197-.043-.218-.13-.306-.387-.175-.602Zm4.763-4.983a.41.41 0 0 1 0-.6.427.427 0 0 1 .612 0l2.797 2.748a.42.42 0 0 1 .13.3.42.42 0 0 1-.13.302l-2.797 2.749a.436.436 0 0 1-.306.129.434.434 0 0 1-.306-.13.41.41 0 0 1 0-.6l2.49-2.45-2.49-2.448ZM3 17.034c0 .838.677 1.504 1.53 1.504H19.56c.852 0 1.53-.666 1.53-1.504V8.873H3v8.161ZM8.086 6.504c0-.482.385-.879.853-.879.469 0 .853.397.853.879s-.384.878-.853.878c-.468 0-.853-.396-.853-.878Zm-2.324 0c0-.482.384-.879.853-.879.468 0 .853.397.853.879s-.385.878-.853.878c-.469 0-.853-.396-.853-.878Zm-2.325 0c0-.482.385-.879.853-.879.468 0 .853.397.853.879s-.385.878-.853.878c-.468 0-.853-.396-.853-.878Zm1.092-1.658C3.677 4.846 3 5.535 3 6.4v1.667h18.09V6.4c0-.844-.699-1.555-1.529-1.555H4.529Z" />
    </g>
  </svg>
);

SvgTerminal.displayName = 'SvgTerminal';

const TerminalIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgTerminal {...props} className={createClass(getIconStyles(props))} />
    )}
  </ClassNames>
);

TerminalIcon.displayName = 'TerminalIcon';
export default TerminalIcon;

// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/import.react.svg
/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error';
  size?: 'small' | 'medium' | 'big' | 'scale';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
} as const;
const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };
    case 'small':
    case 'medium':
    case 'big':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };
    default:
      return {
        width: `${iconSizes.big}px`,
        height: `${iconSizes.big}px`,
      };
  }
};
const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);
  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;
    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};
const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designTokens.colorError;
      break;
    default:
      break;
  }
  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }
  return iconColor;
};
export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;
const SvgImport = (props: SVGProps) => (
  <svg
    width={24}
    height={24}
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
    role="img"
    {...props}
  >
    <path d="M12 16.022c-.319 0-.586-.108-.801-.324a1.086 1.086 0 0 1-.324-.801V6.853l-2.11 2.11a1.08 1.08 0 0 1-.787.337c-.3 0-.572-.122-.816-.366a1.046 1.046 0 0 1-.322-.802c.009-.309.116-.566.322-.773l4.05-4.05a.994.994 0 0 1 .366-.24C11.71 3.024 11.85 3 12 3c.15 0 .29.023.422.07a.994.994 0 0 1 .365.24l4.05 4.05c.226.224.333.491.323.8-.009.31-.116.568-.323.774a1.144 1.144 0 0 1-.8.351c-.31.01-.578-.098-.803-.322l-2.109-2.11v8.044c0 .319-.108.586-.323.8a1.09 1.09 0 0 1-.802.325Zm-6.75 4.5c-.619 0-1.148-.22-1.588-.66A2.168 2.168 0 0 1 3 18.271v-2.25c0-.319.108-.586.323-.802.216-.216.483-.323.802-.323.319 0 .586.107.802.323.215.216.323.483.323.802v2.25h13.5v-2.25c0-.319.108-.586.324-.802.215-.216.482-.323.801-.323.319 0 .586.107.801.323.216.216.324.483.324.802v2.25a2.17 2.17 0 0 1-.66 1.59c-.441.44-.971.66-1.59.66H5.25Z" />
  </svg>
);
SvgImport.displayName = 'SvgImport';
const ImportIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgImport {...props} className={createClass(getIconStyles(props))} />
    )}
  </ClassNames>
);
ImportIcon.displayName = 'ImportIcon';
export default ImportIcon;

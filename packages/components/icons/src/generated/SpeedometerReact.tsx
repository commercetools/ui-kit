// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/speedometer.react.svg

/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error';
  size?: 'small' | 'medium' | 'big' | 'scale';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
} as const;

const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };

    case 'small':
    case 'medium':
    case 'big':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };

    default:
      return {
        width: `${iconSizes.big}px`,
        height: `${iconSizes.big}px`,
      };
  }
};

const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);

  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;

    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};

const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;

  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;

    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;

    case 'surface':
      iconColor = designTokens.colorSurface;
      break;

    case 'info':
      iconColor = designTokens.colorInfo;
      break;

    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;

    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;

    case 'warning':
      iconColor = designTokens.colorWarning;
      break;

    case 'error':
      iconColor = designTokens.colorError;
      break;

    default:
      break;
  }

  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }

  return iconColor;
};

export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;

const SvgSpeedometer = (props: SVGProps) => (
  <svg
    width={24}
    height={24}
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
    role="img"
    {...props}
  >
    <path d="M10.45 15.5c.4.4.917.596 1.55.587.633-.008 1.1-.237 1.4-.687l4.225-6.325c.15-.233.129-.446-.063-.637-.191-.192-.404-.213-.637-.063L10.6 12.6c-.45.3-.687.758-.712 1.375-.025.617.162 1.125.562 1.525ZM5.1 20c-.35 0-.683-.083-1-.25a1.897 1.897 0 0 1-.75-.7A9.929 9.929 0 0 1 2 14c0-1.383.263-2.68.788-3.888a10.18 10.18 0 0 1 2.15-3.175 10.148 10.148 0 0 1 3.187-2.15A9.681 9.681 0 0 1 12 4c.75 0 1.475.079 2.175.237.7.159 1.375.396 2.025.713.35.183.554.433.612.75.059.317-.029.617-.262.9a.872.872 0 0 1-.55.275 1.105 1.105 0 0 1-.625-.075A7.54 7.54 0 0 0 12 6c-2.217 0-4.104.779-5.662 2.337C4.779 9.896 4 11.783 4 14c0 .7.096 1.392.287 2.075.192.683.463 1.325.813 1.925h13.8a7.31 7.31 0 0 0 .838-1.975A8.546 8.546 0 0 0 20 13.9c0-.583-.07-1.154-.212-1.712a7.573 7.573 0 0 0-.613-1.613.959.959 0 0 1-.1-.675.99.99 0 0 1 .35-.575c.267-.233.558-.3.875-.2.317.1.55.317.7.65.3.633.533 1.288.7 1.963.167.675.267 1.379.3 2.112 0 .95-.112 1.858-.337 2.725a9.997 9.997 0 0 1-1.013 2.475c-.183.3-.433.533-.75.7-.317.167-.65.25-1 .25H5.1Z" />
  </svg>
);

SvgSpeedometer.displayName = 'SvgSpeedometer';

const SpeedometerIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgSpeedometer
        {...props}
        className={createClass(getIconStyles(props))}
      />
    )}
  </ClassNames>
);

SpeedometerIcon.displayName = 'SpeedometerIcon';
export default SpeedometerIcon;

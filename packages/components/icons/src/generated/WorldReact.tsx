// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/world.react.svg
/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error';
  size?: 'small' | 'medium' | 'big' | 'scale';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
} as const;
const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };
    case 'small':
    case 'medium':
    case 'big':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };
    default:
      return {
        width: `${iconSizes.big}px`,
        height: `${iconSizes.big}px`,
      };
  }
};
const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);
  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;
    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};
const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designTokens.colorError;
      break;
    default:
      break;
  }
  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }
  return iconColor;
};
export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;
const SvgWorld = (props: SVGProps) => (
  <svg
    width={24}
    height={24}
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
    role="img"
    {...props}
  >
    <path d="M12 21a8.704 8.704 0 0 1-3.488-.71 9.113 9.113 0 0 1-2.868-1.934 9.113 9.113 0 0 1-1.935-2.869A8.704 8.704 0 0 1 3 12c0-1.245.236-2.411.71-3.498a9.148 9.148 0 0 1 1.934-2.858 9.126 9.126 0 0 1 2.868-1.936A8.713 8.713 0 0 1 12 3c1.245 0 2.411.236 3.498.708a9.16 9.16 0 0 1 2.858 1.936 9.148 9.148 0 0 1 1.935 2.858A8.676 8.676 0 0 1 21 12c0 1.23-.236 2.393-.71 3.488a9.113 9.113 0 0 1-1.934 2.868 9.148 9.148 0 0 1-2.858 1.935A8.676 8.676 0 0 1 12 21Zm0-1.845c.39-.54.727-1.103 1.012-1.688.285-.584.518-1.207.698-1.867h-3.42c.18.66.413 1.283.698 1.868.285.584.622 1.147 1.012 1.687Zm-2.34-.36a12.413 12.413 0 0 1-.708-1.542 13.145 13.145 0 0 1-.507-1.653H5.79c.435.75.979 1.403 1.63 1.958a6.48 6.48 0 0 0 2.24 1.237Zm4.68 0a6.471 6.471 0 0 0 2.238-1.238A7.464 7.464 0 0 0 18.21 15.6h-2.655c-.135.57-.304 1.121-.506 1.653-.203.533-.439 1.047-.709 1.542ZM5.025 13.8h3.06a12.03 12.03 0 0 1-.102-2.71c.023-.294.057-.59.102-.89h-3.06A7.21 7.21 0 0 0 4.8 12a7.21 7.21 0 0 0 .225 1.8Zm4.86 0h4.23a12.03 12.03 0 0 0 .102-2.71c-.023-.294-.057-.59-.102-.89h-4.23A12.224 12.224 0 0 0 9.75 12a11.714 11.714 0 0 0 .135 1.8Zm6.03 0h3.06A7.21 7.21 0 0 0 19.2 12a7.21 7.21 0 0 0-.225-1.8h-3.06a12.224 12.224 0 0 1 .135 1.8 11.714 11.714 0 0 1-.135 1.8Zm-.36-5.4h2.655a7.464 7.464 0 0 0-1.632-1.958 6.471 6.471 0 0 0-2.238-1.237c.27.495.506 1.009.71 1.54.201.534.37 1.085.505 1.655Zm-5.265 0h3.42c-.18-.66-.413-1.283-.698-1.868A11.426 11.426 0 0 0 12 4.845c-.39.54-.727 1.103-1.012 1.688A10.653 10.653 0 0 0 10.29 8.4Zm-4.5 0h2.655c.135-.57.304-1.121.507-1.654a12.44 12.44 0 0 1 .708-1.541 6.48 6.48 0 0 0-2.24 1.237A7.473 7.473 0 0 0 5.79 8.4Z" />
  </svg>
);
SvgWorld.displayName = 'SvgWorld';
const WorldIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgWorld {...props} className={createClass(getIconStyles(props))} />
    )}
  </ClassNames>
);
WorldIcon.displayName = 'WorldIcon';
export default WorldIcon;

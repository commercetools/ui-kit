// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/flame.react.svg

/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error';
  size?: 'small' | 'medium' | 'big' | 'scale';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
} as const;

const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };

    case 'small':
    case 'medium':
    case 'big':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };

    default:
      return {
        width: `${iconSizes.big}px`,
        height: `${iconSizes.big}px`,
      };
  }
};

const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);

  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;

    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};

const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;

  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;

    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;

    case 'surface':
      iconColor = designTokens.colorSurface;
      break;

    case 'info':
      iconColor = designTokens.colorInfo;
      break;

    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;

    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;

    case 'warning':
      iconColor = designTokens.colorWarning;
      break;

    case 'error':
      iconColor = designTokens.colorError;
      break;

    default:
      break;
  }

  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }

  return iconColor;
};

export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;

const SvgFlame = (props: SVGProps) => (
  <svg
    width={24}
    height={24}
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
    role="img"
    {...props}
  >
    <path d="M4 14c0 1.583.408 3.012 1.225 4.287a7.86 7.86 0 0 0 3.225 2.888 4.818 4.818 0 0 1-.887-1.45 4.563 4.563 0 0 1-.313-1.675c0-.633.117-1.23.35-1.788a4.505 4.505 0 0 1 1.05-1.512l3.35-3.3 3.375 3.3c.45.45.792.954 1.025 1.512a4.59 4.59 0 0 1 .35 1.788c0 .583-.104 1.142-.313 1.675a4.818 4.818 0 0 1-.887 1.45 7.86 7.86 0 0 0 3.225-2.888C19.592 17.012 20 15.583 20 14c0-1.35-.313-2.617-.938-3.8a7.952 7.952 0 0 0-2.587-2.9.51.51 0 0 0-.475-.063 1.077 1.077 0 0 0-.45.313c-.2.25-.43.437-.688.562a1.897 1.897 0 0 1-.837.188 1.977 1.977 0 0 1-1.438-.575A1.914 1.914 0 0 1 12 6.3V4.5c0-.35-.146-.613-.438-.788a.76.76 0 0 0-.862.013c-2.083 1.283-3.72 2.833-4.912 4.65C4.595 10.192 4 12.067 4 14Zm8-.45L9.7 15.8c-.317.3-.554.642-.712 1.025a3.177 3.177 0 0 0-.238 1.225c0 .883.317 1.637.95 2.262s1.4.938 2.3.938c.9 0 1.667-.313 2.3-.938.633-.625.95-1.379.95-2.262 0-.433-.083-.842-.25-1.225a3.3 3.3 0 0 0-.7-1.025L12 13.55Z" />
  </svg>
);

SvgFlame.displayName = 'SvgFlame';

const FlameIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgFlame {...props} className={createClass(getIconStyles(props))} />
    )}
  </ClassNames>
);

FlameIcon.displayName = 'FlameIcon';
export default FlameIcon;

// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/speech-bubble.react.svg
/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error';
  size?: 'small' | 'medium' | 'big' | 'scale';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
} as const;
const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };
    case 'small':
    case 'medium':
    case 'big':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };
    default:
      return {
        width: `${iconSizes.big}px`,
        height: `${iconSizes.big}px`,
      };
  }
};
const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);
  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;
    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};
const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designTokens.colorError;
      break;
    default:
      break;
  }
  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }
  return iconColor;
};
export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;
const SvgSpeechBubble = (props: SVGProps) => (
  <svg
    width={24}
    height={24}
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
    role="img"
    {...props}
  >
    <path d="M7.5 14.8h5.422a.833.833 0 0 0 .63-.26.89.89 0 0 0 .248-.64.873.873 0 0 0-.258-.642A.873.873 0 0 0 12.9 13H7.477a.835.835 0 0 0-.63.258.893.893 0 0 0-.247.642.87.87 0 0 0 .258.64c.173.174.387.26.642.26Zm0-2.7h9.023a.833.833 0 0 0 .63-.26.89.89 0 0 0 .247-.64.872.872 0 0 0-.26-.642.87.87 0 0 0-.64-.258H7.477a.835.835 0 0 0-.63.258.893.893 0 0 0-.247.642.87.87 0 0 0 .258.64c.173.174.387.26.642.26Zm0-2.7h9.023a.835.835 0 0 0 .63-.258.893.893 0 0 0 .247-.642.872.872 0 0 0-.26-.642.87.87 0 0 0-.64-.258H7.477a.835.835 0 0 0-.63.258.893.893 0 0 0-.247.642c0 .255.086.469.258.642A.873.873 0 0 0 7.5 9.4ZM3 19.817V5.8c0-.495.176-.919.53-1.272A1.733 1.733 0 0 1 4.8 4h14.4c.495 0 .919.176 1.272.528.352.353.528.777.528 1.272v10.8c0 .495-.176.919-.528 1.272a1.736 1.736 0 0 1-1.272.528H6.6l-2.07 2.07c-.285.285-.611.349-.98.19-.366-.156-.55-.438-.55-.843Zm1.8-2.16L5.858 16.6H19.2V5.8H4.8v11.857ZM4.8 5.8v11.857V5.8Z" />
  </svg>
);
SvgSpeechBubble.displayName = 'SvgSpeechBubble';
const SpeechBubbleIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgSpeechBubble
        {...props}
        className={createClass(getIconStyles(props))}
      />
    )}
  </ClassNames>
);
SpeechBubbleIcon.displayName = 'SpeechBubbleIcon';
export default SpeechBubbleIcon;

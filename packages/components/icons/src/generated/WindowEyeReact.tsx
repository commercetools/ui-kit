// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/window-eye.react.svg
/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error';
  size?: 'small' | 'medium' | 'big' | 'scale';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
} as const;
const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };
    case 'small':
    case 'medium':
    case 'big':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };
    default:
      return {
        width: `${iconSizes.big}px`,
        height: `${iconSizes.big}px`,
      };
  }
};
const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);
  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;
    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};
const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designTokens.colorError;
      break;
    default:
      break;
  }
  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }
  return iconColor;
};
export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;
const SvgWindowEye = (props: SVGProps) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width={12}
    height={12}
    fill="none"
    viewBox="0 0 12 12"
    role="img"
    {...props}
  >
    <path
      fill="#545878"
      d="M1.286 12q-.531 0-.908-.378A1.24 1.24 0 0 1 0 10.714V1.286Q0 .755.378.378.755 0 1.286 0h9.428q.53 0 .908.378.378.377.378.908v9.428q0 .53-.378.908a1.24 1.24 0 0 1-.908.378zm0-1.286h9.428V2.571H1.286zm4.712-1.5q-1.32 0-2.355-.723a4.15 4.15 0 0 1-1.5-1.848q.464-1.125 1.502-1.848t2.357-.724 2.355.724a4.15 4.15 0 0 1 1.5 1.848Q9.392 7.768 8.355 8.49t-2.357.723M6 8.357q.947 0 1.712-.454t1.199-1.26a3.2 3.2 0 0 0-1.199-1.26A3.3 3.3 0 0 0 6 4.929q-.947 0-1.712.454-.765.455-1.199 1.26.433.806 1.199 1.26.765.454 1.712.454m0-.643q.446 0 .759-.312.312-.313.312-.76 0-.446-.312-.758A1.03 1.03 0 0 0 6 5.57q-.446 0-.759.313a1.03 1.03 0 0 0-.312.759q0 .446.312.759.312.312.759.312"
    />
  </svg>
);
SvgWindowEye.displayName = 'SvgWindowEye';
const WindowEyeIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgWindowEye {...props} className={createClass(getIconStyles(props))} />
    )}
  </ClassNames>
);
WindowEyeIcon.displayName = 'WindowEyeIcon';
export default WindowEyeIcon;

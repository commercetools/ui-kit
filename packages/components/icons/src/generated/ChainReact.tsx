// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/chain.react.svg

/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error';
  size?: 'small' | 'medium' | 'big' | 'scale';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
} as const;

const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };

    case 'small':
    case 'medium':
    case 'big':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };

    default:
      return {
        width: `${iconSizes.big}px`,
        height: `${iconSizes.big}px`,
      };
  }
};

const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);

  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;

    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};

const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;

  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;

    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;

    case 'surface':
      iconColor = designTokens.colorSurface;
      break;

    case 'info':
      iconColor = designTokens.colorInfo;
      break;

    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;

    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;

    case 'warning':
      iconColor = designTokens.colorWarning;
      break;

    case 'error':
      iconColor = designTokens.colorError;
      break;

    default:
      break;
  }

  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }

  return iconColor;
};

export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;

const SvgChain = (props: SVGProps) => (
  <svg
    width={24}
    height={24}
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
    role="img"
    {...props}
  >
    <path
      d="m9.421 17.912 2.93-2.928 1.698 1.699-2.929 2.929a4.316 4.316 0 0 1-3.06 1.266 4.314 4.314 0 0 1-3.062-1.266l-.73-.73A4.301 4.301 0 0 1 3 15.82a4.3 4.3 0 0 1 1.268-3.06l2.929-2.93 1.699 1.7-2.929 2.929a1.914 1.914 0 0 0-.564 1.361c0 .515.2.999.564 1.362l.73.73c.751.752 1.973.751 2.724 0Zm9.46-13.644.73.73A4.3 4.3 0 0 1 20.88 8.06a4.3 4.3 0 0 1-1.268 3.061l-2.929 2.93-1.699-1.7 2.929-2.929c.363-.364.564-.847.564-1.362 0-.514-.2-.998-.564-1.361l-.73-.73a1.913 1.913 0 0 0-1.363-.565c-.514 0-.998.2-1.361.564l-2.93 2.93-1.698-1.7 2.929-2.929A4.3 4.3 0 0 1 15.82 3c1.157 0 2.244.45 3.062 1.268Zm-10.549 11.2c-.47-.468-.47-1.23 0-1.699l5.438-5.437a1.201 1.201 0 1 1 1.699 1.7l-5.438 5.437a1.198 1.198 0 0 1-1.699 0Z"
      fillRule="evenodd"
    />
  </svg>
);

SvgChain.displayName = 'SvgChain';

const ChainIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgChain {...props} className={createClass(getIconStyles(props))} />
    )}
  </ClassNames>
);

ChainIcon.displayName = 'ChainIcon';
export default ChainIcon;

// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/clipboard.react.svg

/* eslint-disable @typescript-eslint/no-unused-vars */
import type { Theme } from '@emotion/react';
import React from 'react';
import { warning } from '@commercetools-uikit/utils';
import { css, useTheme } from '@emotion/react';
import { customProperties as vars } from '@commercetools-uikit/design-system';
type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error';
  size?: 'small' | 'medium' | 'big' | 'scale';
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
} as const;

const getSizeStyle = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: 100%;
          height: auto;
        }
      `;

    case 'small':
    case 'medium':
    case 'big':
      return `
        width: ${iconSizes[size]}px;
        height: ${iconSizes[size]}px;
      `;

    default:
      return `
        width: ${iconSizes.big}px;
        height: ${iconSizes.big}px;
      `;
  }
};

const capitalize = (value: string) => value[0].toUpperCase() + value.slice(1);

const getColor = (color: Props['color'], theme: Theme) => {
  if (!color) return 'inherit';
  const overwrittenVars = { ...vars, ...theme }; // @ts-expect-error

  const iconColor = overwrittenVars[`color${capitalize(color)}`];

  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }

  return iconColor;
};

const getIconStyles = (props: Props, theme: Theme) => css`
  * {
    fill: ${getColor(props.color, theme)};
  }
  ${getSizeStyle(props.size)};
  flex-shrink: 0;
`;

const SvgClipboard = (props: Props) => (
  <svg
    width={24}
    height={24}
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <g
      id="clipboard_react_svg__Icons"
      stroke="none"
      strokeWidth={1}
      fill="none"
      fillRule="evenodd"
    >
      <g id="clipboard_react_svg__MC-icon-set" transform="translate(-240 -944)">
        <g
          id="clipboard_react_svg__Actions"
          transform="translate(24 752)"
          fill="#000"
          fillRule="nonzero"
        >
          <g id="clipboard_react_svg__Clipboard" transform="translate(216 192)">
            <path
              d="M14.504 4.407h1.233c.912 0 1.66.76 1.66 1.689v3.823a.25.25 0 01-.25.25h-.963a.25.25 0 01-.25-.25v-3.11a.736.736 0 00-.74-.753h-.713v.753c0 .306-.465.376-.766.376H7.797a.567.567 0 01-.555-.565v-.564h-.925a.736.736 0 00-.74.753v11.66c0 .423.324.752.74.752h8.877c.416 0 .74-.329.74-.752v-2.378c0-.117.095-.212.212-.212h1.001a.25.25 0 01.25.25v3.053c0 .928-.748 1.688-1.66 1.688H5.775c-.913 0-1.66-.76-1.66-1.688V6.096c0-.928.747-1.689 1.66-1.689h1.474v-.612c0-.131.112-.24.25-.24h1.099V3.17c0-.132.112-.24.25-.24h4.057c.138 0 .25.108.25.24v.386h1.1c.136 0 .249.108.249.24m5.105 8.542c.197 0 .358.114.358.255v.626c0 .141-.16.255-.358.255h-7.412l2.487 2.455a.24.24 0 01.078.176.241.241 0 01-.078.177l-.39.384a.248.248 0 01-.357 0l-3.625-3.578a.24.24 0 01-.078-.176c0-.067.026-.126.078-.177l3.625-3.577a.248.248 0 01.358 0l.389.384a.24.24 0 01.078.176.241.241 0 01-.078.177l-2.476 2.443h7.4z"
              id="clipboard_react_svg__shape"
            />
          </g>
        </g>
      </g>
    </g>
  </svg>
);

SvgClipboard.displayName = 'SvgClipboard';

const ClipboardIcon = (props: Props) => {
  const theme = useTheme();
  return <SvgClipboard {...props} css={getIconStyles(props, theme)} />;
};

ClipboardIcon.displayName = 'ClipboardIcon';
export default ClipboardIcon;

// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/cart.react.svg

/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error';
  size?: 'small' | 'medium' | 'big' | 'scale';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
} as const;

const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };

    case 'small':
    case 'medium':
    case 'big':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };

    default:
      return {
        width: `${iconSizes.big}px`,
        height: `${iconSizes.big}px`,
      };
  }
};

const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);

  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;

    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};

const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;

  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;

    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;

    case 'surface':
      iconColor = designTokens.colorSurface;
      break;

    case 'info':
      iconColor = designTokens.colorInfo;
      break;

    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;

    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;

    case 'warning':
      iconColor = designTokens.colorWarning;
      break;

    case 'error':
      iconColor = designTokens.colorError;
      break;

    default:
      break;
  }

  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }

  return iconColor;
};

export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;

const SvgCart = (props: SVGProps) => (
  <svg
    width={24}
    height={24}
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <path d="M7.175 21.975c-.5 0-.925-.175-1.275-.525a1.736 1.736 0 0 1-.525-1.275c0-.5.175-.925.525-1.275.35-.35.775-.525 1.275-.525.483 0 .904.175 1.262.525.359.35.538.775.538 1.275 0 .5-.175.925-.525 1.275-.35.35-.775.525-1.275.525Zm10 0c-.5 0-.925-.175-1.275-.525a1.736 1.736 0 0 1-.525-1.275c0-.5.175-.925.525-1.275.35-.35.775-.525 1.275-.525.483 0 .904.175 1.262.525.359.35.538.775.538 1.275 0 .5-.175.925-.525 1.275-.35.35-.775.525-1.275.525Zm-11.3-16.5 2.75 5.7h7.2l3.125-5.7H5.875Zm1.05 11.3c-.7 0-1.204-.233-1.513-.7-.308-.467-.304-.992.013-1.575l1.6-2.95-3.8-8.05H2a.68.68 0 0 1-.513-.225.771.771 0 0 1-.212-.55.728.728 0 0 1 .75-.725h1.7c.15 0 .283.038.4.112.117.075.208.18.275.313l.725 1.55H19.85c.533 0 .87.163 1.012.488.142.324.096.687-.137 1.087l-3.375 6.075c-.167.283-.4.53-.7.738-.3.208-.625.312-.975.312H8.1l-1.4 2.6h11.55c.2 0 .37.075.512.225a.74.74 0 0 1 .213.525.728.728 0 0 1-.75.75h-11.3Zm1.7-5.6h7.2-7.2Z" />
  </svg>
);

SvgCart.displayName = 'SvgCart';

const CartIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgCart {...props} className={createClass(getIconStyles(props))} />
    )}
  </ClassNames>
);

CartIcon.displayName = 'CartIcon';
export default CartIcon;

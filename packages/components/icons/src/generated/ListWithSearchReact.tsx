// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/list-with-search.react.svg

/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error';
  size?: 'small' | 'medium' | 'big' | 'scale';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
} as const;

const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };

    case 'small':
    case 'medium':
    case 'big':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };

    default:
      return {
        width: `${iconSizes.big}px`,
        height: `${iconSizes.big}px`,
      };
  }
};

const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);

  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;

    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};

const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;

  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;

    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;

    case 'surface':
      iconColor = designTokens.colorSurface;
      break;

    case 'info':
      iconColor = designTokens.colorInfo;
      break;

    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;

    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;

    case 'warning':
      iconColor = designTokens.colorWarning;
      break;

    case 'error':
      iconColor = designTokens.colorError;
      break;

    default:
      break;
  }

  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }

  return iconColor;
};

export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;

const SvgListWithSearch = (props: SVGProps) => (
  <svg
    width={24}
    height={24}
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
    role="img"
    {...props}
  >
    <path d="M3.92 8.759a.887.887 0 0 1-.655-.265A.887.887 0 0 1 3 7.839c0-.26.088-.479.265-.656a.889.889 0 0 1 .655-.263h2.758c.26 0 .48.088.656.263a.892.892 0 0 1 .264.656c0 .26-.088.479-.264.655a.89.89 0 0 1-.656.265H3.92Zm0 4.597a.888.888 0 0 1-.655-.264.887.887 0 0 1-.265-.655c0-.26.088-.48.265-.656a.89.89 0 0 1 .655-.264h2.758c.26 0 .48.088.656.264a.892.892 0 0 1 .264.656c0 .26-.088.479-.264.655a.89.89 0 0 1-.656.264H3.92Zm15.54 3.954-2.897-2.896c-.368.26-.77.456-1.206.585-.437.131-.878.196-1.322.196-1.273 0-2.357-.448-3.253-1.345-.897-.896-1.345-1.98-1.345-3.252 0-1.272.448-2.357 1.345-3.254C11.678 6.448 12.762 6 14.034 6c1.272 0 2.357.448 3.254 1.344.896.897 1.344 1.982 1.344 3.254 0 .444-.065.885-.195 1.322a4.11 4.11 0 0 1-.586 1.206l2.896 2.897a.872.872 0 0 1 .253.644c0 .26-.084.475-.253.643a.872.872 0 0 1-.644.253.872.872 0 0 1-.643-.253Zm-5.426-3.954a2.66 2.66 0 0 0 1.954-.804 2.66 2.66 0 0 0 .805-1.954 2.66 2.66 0 0 0-.804-1.954 2.66 2.66 0 0 0-1.955-.805 2.66 2.66 0 0 0-1.954.805 2.66 2.66 0 0 0-.804 1.954c0 .766.268 1.417.805 1.954a2.66 2.66 0 0 0 1.954.804ZM3.92 17.954a.888.888 0 0 1-.655-.265.887.887 0 0 1-.265-.654c0-.261.088-.48.265-.655a.887.887 0 0 1 .655-.265h7.356a.89.89 0 0 1 .655.265.889.889 0 0 1 .264.655.89.89 0 0 1-.264.654.89.89 0 0 1-.655.265H3.92Z" />
  </svg>
);

SvgListWithSearch.displayName = 'SvgListWithSearch';

const ListWithSearchIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgListWithSearch
        {...props}
        className={createClass(getIconStyles(props))}
      />
    )}
  </ClassNames>
);

ListWithSearchIcon.displayName = 'ListWithSearchIcon';
export default ListWithSearchIcon;

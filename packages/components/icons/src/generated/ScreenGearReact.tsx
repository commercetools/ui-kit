// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/screen-gear.react.svg
/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error'
    | 'success';
  /**
   * The size of the icon. 'small', 'medium', 'big' have been deprecated in favor of '10', '20', '30', '40'.
   */
  size?: 'small' | 'medium' | 'big' | 'scale' | '10' | '20' | '30' | '40';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
  '10': 12,
  '20': 16,
  '30': 20,
  '40': 24,
} as const;
const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };
    case 'small':
    case 'medium':
    case 'big':
    case '10':
    case '20':
    case '30':
    case '40':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };
    default:
      return {
        width: `${iconSizes['40']}px`,
        height: `${iconSizes['40']}px`,
      };
  }
};
const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);
  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;
    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};
const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designTokens.colorError;
      break;
    case 'success':
      iconColor = designTokens.colorSuccess;
      break;
    default:
      break;
  }
  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }
  return iconColor;
};
export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;
const SvgScreenGear = (props: SVGProps) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width={24}
    height={24}
    viewBox="0 0 24 24"
    aria-hidden="true"
    {...props}
  >
    <path d="M5 21q-.825 0-1.413-.587A1.93 1.93 0 0 1 3 19V5q0-.825.587-1.413A1.93 1.93 0 0 1 5 3h14q.825 0 1.413.587Q21 4.175 21 5v14q0 .825-.587 1.413A1.93 1.93 0 0 1 19 21zm0-2h14V5H5zm6.4-2h1.2a.43.43 0 0 0 .3-.113.6.6 0 0 0 .175-.287l.225-1.1q.3-.124.563-.262a4.4 4.4 0 0 0 .537-.338l1.075.325q.175.05.325-.012a.56.56 0 0 0 .25-.213l.6-1a.38.38 0 0 0 .05-.325.7.7 0 0 0-.175-.3l-.825-.725q.05-.35.05-.65t-.05-.65l.825-.725a.7.7 0 0 0 .175-.3.38.38 0 0 0-.05-.325l-.6-1a.56.56 0 0 0-.25-.213.48.48 0 0 0-.325-.012L14.4 9.1a4.4 4.4 0 0 0-.537-.338A7 7 0 0 0 13.3 8.5l-.225-1.1a.6.6 0 0 0-.175-.288.43.43 0 0 0-.3-.112h-1.2a.43.43 0 0 0-.3.112.6.6 0 0 0-.175.288L10.7 8.5q-.3.124-.563.262A4.4 4.4 0 0 0 9.6 9.1l-1.075-.325a.48.48 0 0 0-.325.012.56.56 0 0 0-.25.213l-.6 1a.38.38 0 0 0-.05.325.7.7 0 0 0 .175.3l.825.725q-.05.35-.05.65t.05.65l-.825.725a.7.7 0 0 0-.175.3.38.38 0 0 0 .05.325l.6 1q.1.15.25.213.15.062.325.012L9.6 14.9q.274.2.537.338.263.137.563.262l.225 1.1a.6.6 0 0 0 .175.287.43.43 0 0 0 .3.113m.6-3q-.825 0-1.412-.588A1.92 1.92 0 0 1 10 12q0-.825.588-1.413A1.93 1.93 0 0 1 12 10q.825 0 1.413.587Q14 11.175 14 12t-.587 1.412A1.93 1.93 0 0 1 12 14m-7 5V5z" />
  </svg>
);
SvgScreenGear.displayName = 'SvgScreenGear';
const ScreenGearIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgScreenGear {...props} className={createClass(getIconStyles(props))} />
    )}
  </ClassNames>
);
ScreenGearIcon.displayName = 'ScreenGearIcon';
export default ScreenGearIcon;

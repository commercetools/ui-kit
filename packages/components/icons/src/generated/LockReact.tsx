// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/lock.react.svg

/* eslint-disable @typescript-eslint/no-unused-vars */
import type { Theme } from '@emotion/react';
import React from 'react';
import { warning } from '@commercetools-uikit/utils';
import { css, useTheme } from '@emotion/react';
import { customProperties as vars } from '@commercetools-uikit/design-system';
type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error';
  size?: 'small' | 'medium' | 'big' | 'scale';
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
} as const;

const getSizeStyle = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: 100%;
          height: auto;
        }
      `;

    case 'small':
    case 'medium':
    case 'big':
      return `
        width: ${iconSizes[size]}px;
        height: ${iconSizes[size]}px;
      `;

    default:
      return `
        width: ${iconSizes.big}px;
        height: ${iconSizes.big}px;
      `;
  }
};

const capitalize = (value: string) => value[0].toUpperCase() + value.slice(1);

const getColor = (color: Props['color'], theme: Theme) => {
  if (!color) return 'inherit';
  const overwrittenVars = { ...vars, ...theme }; // @ts-expect-error

  const iconColor = overwrittenVars[`color${capitalize(color)}`];

  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }

  return iconColor;
};

const getIconStyles = (props: Props, theme: Theme) => css`
  * {
    fill: ${getColor(props.color, theme)};
  }
  ${getSizeStyle(props.size)};
  flex-shrink: 0;
`;

const SvgLock = (props: Props) => (
  <svg
    width={24}
    height={24}
    viewBox="0 0 87 118"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <g
      id="lock_react_svg__Final-ImportBoard"
      stroke="none"
      strokeWidth={1}
      fill="none"
      fillRule="evenodd"
    >
      <g
        id="lock_react_svg__2-Upload-files---Locked"
        transform="translate(-697 -285)"
        fill="#999"
        fillRule="nonzero"
      >
        <path
          d="M781.167 334.925h-6.824V319.04c0-18.772-15.3-34.04-34.122-34.04-18.817 0-34.122 15.268-34.122 34.04v15.885h-6.824a2.273 2.273 0 00-2.275 2.27v51.99c0 .79.414 1.524 1.087 1.937 12.753 7.77 27.32 11.878 42.134 11.878 14.813 0 29.381-4.107 42.138-11.878a2.284 2.284 0 001.083-1.938v-51.99a2.276 2.276 0 00-2.275-2.269zm-35.577 33.989v15.868c0 1.572-1.208 2.858-2.684 2.858h-5.37c-1.482 0-2.685-1.286-2.685-2.858v-15.868c-3.2-1.983-5.37-5.617-5.37-9.846 0-6.308 4.812-11.428 10.74-11.428s10.74 5.12 10.74 11.428c0 4.217-2.17 7.863-5.37 9.846zm14.526-34.519h-41.163v-15.607c0-11.064 9.235-20.067 20.582-20.067 11.343 0 20.581 9.003 20.581 20.067v15.607z"
          id="lock_react_svg__Shape"
        />
      </g>
    </g>
  </svg>
);

SvgLock.displayName = 'SvgLock';

const LockIcon = (props: Props) => {
  const theme = useTheme();
  return <SvgLock {...props} css={getIconStyles(props, theme)} />;
};

LockIcon.displayName = 'LockIcon';
export default LockIcon;

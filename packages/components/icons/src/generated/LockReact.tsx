// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/lock.react.svg

/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error';
  size?: 'small' | 'medium' | 'big' | 'scale';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
} as const;

const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };

    case 'small':
    case 'medium':
    case 'big':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };

    default:
      return {
        width: `${iconSizes.big}px`,
        height: `${iconSizes.big}px`,
      };
  }
};

const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);

  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;

    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};

const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;

  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;

    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;

    case 'surface':
      iconColor = designTokens.colorSurface;
      break;

    case 'info':
      iconColor = designTokens.colorInfo;
      break;

    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;

    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;

    case 'warning':
      iconColor = designTokens.colorWarning;
      break;

    case 'error':
      iconColor = designTokens.colorError;
      break;

    default:
      break;
  }

  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }

  return iconColor;
};

export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;

const SvgLock = (props: SVGProps) => (
  <svg
    width={24}
    height={24}
    viewBox="0 0 87 118"
    xmlns="http://www.w3.org/2000/svg"
    role="img"
    {...props}
  >
    <path
      d="M84.167 49.925h-6.824V34.04C77.343 15.268 62.043 0 43.22 0 24.404 0 9.099 15.268 9.099 34.04v15.885H2.275A2.273 2.273 0 0 0 0 52.195v51.99c0 .79.414 1.524 1.087 1.937C13.84 113.892 28.407 118 43.221 118c14.813 0 29.381-4.107 42.138-11.878a2.284 2.284 0 0 0 1.083-1.938v-51.99a2.276 2.276 0 0 0-2.275-2.269ZM48.59 83.914v15.868c0 1.572-1.208 2.858-2.684 2.858h-5.37c-1.482 0-2.685-1.286-2.685-2.858V83.914c-3.2-1.983-5.37-5.617-5.37-9.846 0-6.308 4.812-11.428 10.74-11.428s10.74 5.12 10.74 11.428c0 4.217-2.17 7.863-5.37 9.846Zm14.526-34.519H21.953V33.788c0-11.064 9.235-20.067 20.582-20.067 11.343 0 20.581 9.003 20.581 20.067v15.607Z"
      fill="#999"
      fillRule="nonzero"
    />
  </svg>
);

SvgLock.displayName = 'SvgLock';

const LockIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgLock {...props} className={createClass(getIconStyles(props))} />
    )}
  </ClassNames>
);

LockIcon.displayName = 'LockIcon';
export default LockIcon;

// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/star.react.svg

/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error';
  size?: 'small' | 'medium' | 'big' | 'scale';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
} as const;

const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };

    case 'small':
    case 'medium':
    case 'big':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };

    default:
      return {
        width: `${iconSizes.big}px`,
        height: `${iconSizes.big}px`,
      };
  }
};

const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);

  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;

    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};

const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;

  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;

    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;

    case 'surface':
      iconColor = designTokens.colorSurface;
      break;

    case 'info':
      iconColor = designTokens.colorInfo;
      break;

    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;

    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;

    case 'warning':
      iconColor = designTokens.colorWarning;
      break;

    case 'error':
      iconColor = designTokens.colorError;
      break;

    default:
      break;
  }

  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }

  return iconColor;
};

export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;

const SvgStar = (props: SVGProps) => (
  <svg
    width={24}
    height={24}
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    role="img"
    {...props}
  >
    <path
      d="M7.96 17.983 12 15.55l4.04 2.463-1.06-4.612 3.552-3.094-4.698-.402L12 5.55l-1.834 4.326-4.698.4 3.553 3.095-1.06 4.612ZM12 17.24l-4.727 2.836a.826.826 0 0 1-.43.1.759.759 0 0 1-.373-.129.796.796 0 0 1-.272-.315.519.519 0 0 1-.014-.43l1.232-5.385-4.154-3.64a.684.684 0 0 1-.243-.372.815.815 0 0 1 .013-.4.645.645 0 0 1 .216-.33.771.771 0 0 1 .415-.158l5.5-.487 2.15-5.1a.87.87 0 0 1 .3-.315A.727.727 0 0 1 12 3c.134 0 .263.038.386.114a.87.87 0 0 1 .302.316l2.148 5.099 5.501.487c.172.02.31.072.415.158a.645.645 0 0 1 .216.33.815.815 0 0 1 .013.4.684.684 0 0 1-.243.373l-4.154 3.639 1.26 5.385a.606.606 0 0 1-.042.43.796.796 0 0 1-.272.315.759.759 0 0 1-.373.13.825.825 0 0 1-.43-.101L12 17.239Z"
      fill="#000"
    />
  </svg>
);

SvgStar.displayName = 'SvgStar';

const StarIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgStar {...props} className={createClass(getIconStyles(props))} />
    )}
  </ClassNames>
);

StarIcon.displayName = 'StarIcon';
export default StarIcon;

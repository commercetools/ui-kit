// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/chain-broken.react.svg

/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error';
  size?: 'small' | 'medium' | 'big' | 'scale';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
} as const;

const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };

    case 'small':
    case 'medium':
    case 'big':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };

    default:
      return {
        width: `${iconSizes.big}px`,
        height: `${iconSizes.big}px`,
      };
  }
};

const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);

  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;

    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};

const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;

  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;

    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;

    case 'surface':
      iconColor = designTokens.colorSurface;
      break;

    case 'info':
      iconColor = designTokens.colorInfo;
      break;

    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;

    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;

    case 'warning':
      iconColor = designTokens.colorWarning;
      break;

    case 'error':
      iconColor = designTokens.colorError;
      break;

    default:
      break;
  }

  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }

  return iconColor;
};

export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;

const SvgChainBroken = (props: SVGProps) => (
  <svg
    width={24}
    height={24}
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
    role="img"
    {...props}
  >
    <path d="m14.775 12.75-1.425-1.425h1.425c.2 0 .375.067.525.2.15.133.225.3.225.5s-.075.37-.225.512a.74.74 0 0 1-.525.213Zm3.975 3.975L17.525 15.5c.867-.167 1.58-.567 2.138-1.2a3.258 3.258 0 0 0 .837-2.225c0-1-.333-1.833-1-2.5s-1.5-1-2.5-1h-3.125a.728.728 0 0 1-.75-.75.728.728 0 0 1 .75-.75H17c1.417 0 2.604.48 3.563 1.438C21.52 9.47 22 10.658 22 12.075c0 1.083-.313 2.033-.938 2.85a5.59 5.59 0 0 1-2.312 1.8Zm1.075 5.325L2.1 4.35a.734.734 0 0 1-.225-.537c0-.209.075-.388.225-.538.15-.15.33-.225.538-.225.208 0 .387.075.537.225L20.9 21a.72.72 0 0 1 .225.525.72.72 0 0 1-.225.525.734.734 0 0 1-.537.225.734.734 0 0 1-.538-.225ZM10.5 17H7c-1.417 0-2.604-.48-3.563-1.438C2.48 14.604 2 13.418 2 12c0-1.233.37-2.3 1.112-3.2A4.812 4.812 0 0 1 5.95 7.1l1.4 1.4H7c-1 0-1.833.333-2.5 1s-1 1.5-1 2.5.333 1.833 1 2.5 1.5 1 2.5 1h3.5a.729.729 0 0 1 .75.75.728.728 0 0 1-.75.75Zm1.1-4.25H9.225a.728.728 0 0 1-.75-.75.729.729 0 0 1 .75-.75h.875l1.5 1.5Z" />
  </svg>
);

SvgChainBroken.displayName = 'SvgChainBroken';

const ChainBrokenIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgChainBroken
        {...props}
        className={createClass(getIconStyles(props))}
      />
    )}
  </ClassNames>
);

ChainBrokenIcon.displayName = 'ChainBrokenIcon';
export default ChainBrokenIcon;

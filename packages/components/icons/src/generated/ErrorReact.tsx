// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/error.react.svg
/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error';
  size?: 'small' | 'medium' | 'big' | 'scale';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
} as const;
const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };
    case 'small':
    case 'medium':
    case 'big':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };
    default:
      return {
        width: `${iconSizes.big}px`,
        height: `${iconSizes.big}px`,
      };
  }
};
const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);
  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;
    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};
const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designTokens.colorError;
      break;
    default:
      break;
  }
  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }
  return iconColor;
};
export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;
const SvgError = (props: SVGProps) => (
  <svg
    width={24}
    height={24}
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
    role="img"
    {...props}
  >
    <path d="M12 21a8.769 8.769 0 0 1-3.511-.709 8.988 8.988 0 0 1-2.857-1.933 9.208 9.208 0 0 1-1.923-2.868A8.768 8.768 0 0 1 3 11.979c0-1.246.236-2.413.709-3.502a9.118 9.118 0 0 1 1.923-2.846 9.08 9.08 0 0 1 2.857-1.922A8.768 8.768 0 0 1 12 3c1.246 0 2.416.236 3.511.709A9.09 9.09 0 0 1 18.37 5.63a9.127 9.127 0 0 1 1.922 2.846A8.696 8.696 0 0 1 21 11.98a8.769 8.769 0 0 1-.709 3.511 9.217 9.217 0 0 1-1.922 2.868 8.998 8.998 0 0 1-2.857 1.933A8.769 8.769 0 0 1 12 21Zm0-2.277c1.876 0 3.465-.655 4.768-1.965 1.304-1.31 1.955-2.904 1.955-4.78 0-.701-.104-1.381-.31-2.04a6.424 6.424 0 0 0-.936-1.847l-9.365 9.365c.544.43 1.153.748 1.826.955.673.208 1.36.312 2.062.312Zm-5.477-2.857 9.343-9.386a6.542 6.542 0 0 0-1.836-.902c-.652-.2-1.328-.301-2.03-.301-1.876 0-3.465.648-4.769 1.943-1.303 1.297-1.954 2.883-1.954 4.759 0 .701.104 1.381.31 2.04.209.659.52 1.275.936 1.847Z" />
  </svg>
);
SvgError.displayName = 'SvgError';
const ErrorIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgError {...props} className={createClass(getIconStyles(props))} />
    )}
  </ClassNames>
);
ErrorIcon.displayName = 'ErrorIcon';
export default ErrorIcon;

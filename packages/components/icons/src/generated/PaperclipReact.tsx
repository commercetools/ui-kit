// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/paperclip.react.svg

/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error';
  size?: 'small' | 'medium' | 'big' | 'scale';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
} as const;

const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };

    case 'small':
    case 'medium':
    case 'big':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };

    default:
      return {
        width: `${iconSizes.big}px`,
        height: `${iconSizes.big}px`,
      };
  }
};

const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);

  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;

    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};

const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;

  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;

    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;

    case 'surface':
      iconColor = designTokens.colorSurface;
      break;

    case 'info':
      iconColor = designTokens.colorInfo;
      break;

    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;

    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;

    case 'warning':
      iconColor = designTokens.colorWarning;
      break;

    case 'error':
      iconColor = designTokens.colorError;
      break;

    default:
      break;
  }

  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }

  return iconColor;
};

export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;

const SvgPaperclip = (props: SVGProps) => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" {...props}>
    <path d="M9.3 18.7c-.5.5-1.3.8-2.1.8s-1.5-.3-2.1-.8c-.5-.5-.9-1.1-.9-1.8s.3-1.4.9-1.8L16.4 5c.7-.6 1.9-.6 2.6 0 .7.7.7 1.7 0 2.4l-10 9c-.3.3-.8.3-1.1 0-.1-.1-.2-.3-.2-.5s.1-.4.2-.5l5.9-5.1c.2-.1.2-.3.2-.4 0-.2-.1-.3-.2-.4-.3-.2-.7-.2-1 0l-5.9 5.1c-.4.4-.6.8-.6 1.4 0 .5.2 1 .6 1.4.8.7 2.2.7 3 0l10.1-9c.7-.7 1-1.4 1-2.2 0-.8-.3-1.5-.9-2-.6-.5-1.4-.8-2.3-.8-.9 0-1.7.3-2.3.8l-11.2 10c-.9.7-1.3 1.7-1.3 2.7 0 1 .4 2 1.2 2.7.8.7 1.9 1.1 3 1.1s2.2-.4 3-1.1l9.3-8.4c.1-.1.2-.3.2-.4 0-.2-.1-.3-.2-.4-.3-.2-.7-.2-1 0l-9.2 8.3z" />
  </svg>
);

SvgPaperclip.displayName = 'SvgPaperclip';

const PaperclipIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgPaperclip {...props} className={createClass(getIconStyles(props))} />
    )}
  </ClassNames>
);

PaperclipIcon.displayName = 'PaperclipIcon';
export default PaperclipIcon;

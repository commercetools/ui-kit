// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/bidirectional-arrow.react.svg

/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error';
  size?: 'small' | 'medium' | 'big' | 'scale';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
} as const;

const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };

    case 'small':
    case 'medium':
    case 'big':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };

    default:
      return {
        width: `${iconSizes.big}px`,
        height: `${iconSizes.big}px`,
      };
  }
};

const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);

  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;

    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};

const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;

  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;

    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;

    case 'surface':
      iconColor = designTokens.colorSurface;
      break;

    case 'info':
      iconColor = designTokens.colorInfo;
      break;

    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;

    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;

    case 'warning':
      iconColor = designTokens.colorWarning;
      break;

    case 'error':
      iconColor = designTokens.colorError;
      break;

    default:
      break;
  }

  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }

  return iconColor;
};

export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;

const SvgBidirectionalArrow = (props: SVGProps) => (
  <svg
    width={24}
    height={24}
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
    role="img"
    {...props}
  >
    <path d="m14.97 13.01-3.24-3.24a.784.784 0 0 1-.19-.293.989.989 0 0 1-.057-.337c0-.12.018-.232.056-.338a.784.784 0 0 1 .191-.292l3.24-3.24c.18-.18.39-.27.63-.27s.45.09.63.27c.18.18.27.394.27.64 0 .249-.09.462-.27.643L14.542 8.24H20.1a.87.87 0 0 1 .64.258c.174.173.26.387.26.642a.869.869 0 0 1-.26.64.869.869 0 0 1-.64.26h-5.558l1.688 1.688c.18.18.27.39.27.63s-.09.45-.27.63a.941.941 0 0 1-.618.292c-.233.015-.447-.075-.642-.27Zm-7.2 5.377c.18.18.39.274.63.281.24.008.45-.078.63-.258l3.24-3.24a.795.795 0 0 0 .192-.293c.037-.104.056-.217.056-.337 0-.12-.02-.232-.056-.337a.795.795 0 0 0-.192-.293l-3.24-3.24a.863.863 0 0 0-.63-.27c-.24 0-.45.09-.63.27a.876.876 0 0 0-.27.64c0 .249.09.463.27.643l1.688 1.687H3.9a.87.87 0 0 0-.64.258.872.872 0 0 0-.26.642c0 .255.086.469.26.64.171.174.385.26.64.26h5.557L7.77 17.128c-.18.18-.27.39-.27.63s.09.45.27.63Z" />
  </svg>
);

SvgBidirectionalArrow.displayName = 'SvgBidirectionalArrow';

const BidirectionalArrowIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgBidirectionalArrow
        {...props}
        className={createClass(getIconStyles(props))}
      />
    )}
  </ClassNames>
);

BidirectionalArrowIcon.displayName = 'BidirectionalArrowIcon';
export default BidirectionalArrowIcon;

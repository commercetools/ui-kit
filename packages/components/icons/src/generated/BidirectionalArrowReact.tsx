// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/bidirectional-arrow.react.svg

/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error';
  size?: 'small' | 'medium' | 'big' | 'scale';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
} as const;

const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };

    case 'small':
    case 'medium':
    case 'big':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };

    default:
      return {
        width: `${iconSizes.big}px`,
        height: `${iconSizes.big}px`,
      };
  }
};

const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);

  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;

    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};

const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;

  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;

    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;

    case 'surface':
      iconColor = designTokens.colorSurface;
      break;

    case 'info':
      iconColor = designTokens.colorInfo;
      break;

    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;

    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;

    case 'warning':
      iconColor = designTokens.colorWarning;
      break;

    case 'error':
      iconColor = designTokens.colorError;
      break;

    default:
      break;
  }

  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }

  return iconColor;
};

export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;

const SvgBidirectionalArrow = (props: SVGProps) => (
  <svg
    width={24}
    height={24}
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
    role="img"
    {...props}
  >
    <path d="m15.3 13.3-3.6-3.6a.871.871 0 0 1-.212-.325A1.099 1.099 0 0 1 11.425 9c0-.133.021-.258.063-.375A.871.871 0 0 1 11.7 8.3l3.6-3.6c.2-.2.433-.3.7-.3.267 0 .5.1.7.3.2.2.3.437.3.712 0 .275-.1.513-.3.713L14.825 8H21c.283 0 .52.096.712.287.192.192.288.43.288.713s-.096.52-.288.712A.965.965 0 0 1 21 10h-6.175l1.875 1.875c.2.2.3.433.3.7 0 .267-.1.5-.3.7-.2.2-.429.308-.687.325-.259.017-.496-.083-.713-.3Zm-8 5.975c.2.2.433.304.7.312.267.009.5-.087.7-.287l3.6-3.6c.1-.1.171-.208.213-.325.041-.117.062-.242.062-.375s-.02-.258-.062-.375a.883.883 0 0 0-.213-.325l-3.6-3.6a.96.96 0 0 0-.7-.3c-.267 0-.5.1-.7.3-.2.2-.3.437-.3.712 0 .275.1.513.3.713L9.175 14H3a.967.967 0 0 0-.712.287A.968.968 0 0 0 2 15c0 .283.096.52.288.712A.965.965 0 0 0 3 16h6.175L7.3 17.875c-.2.2-.3.433-.3.7 0 .267.1.5.3.7Z" />
  </svg>
);

SvgBidirectionalArrow.displayName = 'SvgBidirectionalArrow';

const BidirectionalArrowIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgBidirectionalArrow
        {...props}
        className={createClass(getIconStyles(props))}
      />
    )}
  </ClassNames>
);

BidirectionalArrowIcon.displayName = 'BidirectionalArrowIcon';
export default BidirectionalArrowIcon;

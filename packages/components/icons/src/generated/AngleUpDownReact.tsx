// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/angle-up-down.react.svg

/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error';
  size?: 'small' | 'medium' | 'big' | 'scale';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
} as const;

const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };

    case 'small':
    case 'medium':
    case 'big':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };

    default:
      return {
        width: `${iconSizes.big}px`,
        height: `${iconSizes.big}px`,
      };
  }
};

const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);

  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;

    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};

const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;

  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;

    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;

    case 'surface':
      iconColor = designTokens.colorSurface;
      break;

    case 'info':
      iconColor = designTokens.colorInfo;
      break;

    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;

    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;

    case 'warning':
      iconColor = designTokens.colorWarning;
      break;

    case 'error':
      iconColor = designTokens.colorError;
      break;

    default:
      break;
  }

  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }

  return iconColor;
};

export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;

const SvgAngleUpDown = (props: SVGProps) => (
  <svg
    width={32}
    height={32}
    viewBox="0 0 32 32"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <g fill="#1A1A1A" fillRule="evenodd">
      <path d="m23.84 19.142-.801-.86a.491.491 0 0 0-.37-.171.49.49 0 0 0-.368.172l-6.3 6.752-6.302-6.752a.491.491 0 0 0-.368-.172.49.49 0 0 0-.37.172l-.8.859a.562.562 0 0 0-.161.395c0 .149.054.28.16.395l7.471 8.007c.107.115.23.172.37.172a.49.49 0 0 0 .368-.172l7.471-8.007a.562.562 0 0 0 .16-.395.563.563 0 0 0-.16-.395ZM23.84 12.97l-.801.858a.491.491 0 0 1-.37.172.49.49 0 0 1-.368-.172l-6.3-6.752-6.302 6.752a.491.491 0 0 1-.368.172.49.49 0 0 1-.37-.172l-.8-.86A.562.562 0 0 1 8 12.575c0-.15.054-.28.16-.395l7.471-8.007a.491.491 0 0 1 .37-.172.49.49 0 0 1 .368.172l7.471 8.007c.107.114.16.246.16.395 0 .149-.053.28-.16.395Z" />
    </g>
  </svg>
);

SvgAngleUpDown.displayName = 'SvgAngleUpDown';

const AngleUpDownIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgAngleUpDown
        {...props}
        className={createClass(getIconStyles(props))}
      />
    )}
  </ClassNames>
);

AngleUpDownIcon.displayName = 'AngleUpDownIcon';
export default AngleUpDownIcon;

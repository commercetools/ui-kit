// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/arrows.react.svg

/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error';
  size?: 'small' | 'medium' | 'big' | 'scale';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
} as const;

const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };

    case 'small':
    case 'medium':
    case 'big':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };

    default:
      return {
        width: `${iconSizes.big}px`,
        height: `${iconSizes.big}px`,
      };
  }
};

const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);

  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;

    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};

const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;

  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;

    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;

    case 'surface':
      iconColor = designTokens.colorSurface;
      break;

    case 'info':
      iconColor = designTokens.colorInfo;
      break;

    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;

    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;

    case 'warning':
      iconColor = designTokens.colorWarning;
      break;

    case 'error':
      iconColor = designTokens.colorError;
      break;

    default:
      break;
  }

  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }

  return iconColor;
};

export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;

const SvgArrows = (props: SVGProps) => (
  <svg
    width={24}
    height={24}
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
    role="img"
    {...props}
  >
    <path d="M12 10a.965.965 0 0 1-.712-.288A.965.965 0 0 1 11 9V5.85l-1.1 1.1c-.2.2-.437.3-.712.3a.974.974 0 0 1-.713-.3c-.2-.2-.3-.438-.3-.713 0-.275.1-.512.3-.712L11.3 2.7c.1-.1.208-.171.325-.213.117-.041.242-.062.375-.062s.258.02.375.062a.883.883 0 0 1 .325.213l2.85 2.85c.2.2.296.437.288.712a1.022 1.022 0 0 1-.313.713c-.2.2-.442.3-.725.3a.988.988 0 0 1-.725-.3L13 5.85V9c0 .283-.096.52-.287.712A.968.968 0 0 1 12 10Zm0 11.575a1.1 1.1 0 0 1-.375-.063.872.872 0 0 1-.325-.212l-2.85-2.85a.93.93 0 0 1-.287-.713c.008-.275.112-.512.312-.712.2-.2.446-.304.738-.313a.856.856 0 0 1 .712.313L11 18.15V15c0-.283.096-.521.288-.713A.967.967 0 0 1 12 14a.97.97 0 0 1 .713.287A.97.97 0 0 1 13 15v3.15l1.1-1.125c.183-.2.417-.3.7-.3s.525.1.725.3c.2.2.3.442.3.725s-.1.525-.3.725L12.7 21.3c-.1.1-.208.17-.325.212a1.098 1.098 0 0 1-.375.063Zm5.025-6.05a1.05 1.05 0 0 1-.313-.738.856.856 0 0 1 .313-.712L18.15 13H15a.965.965 0 0 1-.712-.288A.965.965 0 0 1 14 12c0-.283.096-.521.288-.713A.967.967 0 0 1 15 11h3.15l-1.125-1.1a.908.908 0 0 1-.3-.7c0-.283.1-.525.3-.725.2-.2.442-.3.725-.3s.525.1.725.3L21.3 11.3c.1.1.171.208.213.325.041.117.062.242.062.375s-.02.258-.062.375a.883.883 0 0 1-.213.325l-2.85 2.85c-.2.2-.437.296-.712.287a1.018 1.018 0 0 1-.713-.312Zm-11.5 0L2.7 12.7a.871.871 0 0 1-.212-.325A1.098 1.098 0 0 1 2.425 12a1.1 1.1 0 0 1 .063-.375.872.872 0 0 1 .212-.325l2.85-2.85a.933.933 0 0 1 .688-.275c.275 0 .512.1.712.3.2.2.296.442.288.725a1.035 1.035 0 0 1-.313.725L5.85 11H9a.97.97 0 0 1 .713.287A.97.97 0 0 1 10 12c0 .283-.096.52-.287.712A.968.968 0 0 1 9 13H5.85l1.125 1.1c.2.183.3.417.3.7s-.1.525-.3.725c-.2.2-.442.3-.725.3a.988.988 0 0 1-.725-.3Z" />
  </svg>
);

SvgArrows.displayName = 'SvgArrows';

const ArrowsIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgArrows {...props} className={createClass(getIconStyles(props))} />
    )}
  </ClassNames>
);

ArrowsIcon.displayName = 'ArrowsIcon';
export default ArrowsIcon;

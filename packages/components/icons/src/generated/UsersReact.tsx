// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/users.react.svg
/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error'
    | 'success';
  /**
   * The size of the icon. 'small', 'medium', 'big' have been deprecated in favor of '10', '20', '30', '40'.
   */
  size?: 'small' | 'medium' | 'big' | 'scale' | '10' | '20' | '30' | '40';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
  '10': 12,
  '20': 16,
  '30': 20,
  '40': 24,
} as const;
const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };
    case 'small':
    case 'medium':
    case 'big':
    case '10':
    case '20':
    case '30':
    case '40':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };
    default:
      return {
        width: `${iconSizes['40']}px`,
        height: `${iconSizes['40']}px`,
      };
  }
};
const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);
  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;
    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};
const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designTokens.colorError;
      break;
    case 'success':
      iconColor = designTokens.colorSuccess;
      break;
    default:
      break;
  }
  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }
  return iconColor;
};
export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;
const SvgUsers = (props: SVGProps) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width={24}
    height={24}
    viewBox="0 0 24 24"
    role="img"
    {...props}
  >
    <path d="M3 18.09V15.8q0-.696.358-1.279.358-.582.951-.89 1.269-.634 2.577-.95a11.3 11.3 0 0 1 2.66-.317q1.35 0 2.659.316a12.2 12.2 0 0 1 2.577.952q.593.306.95.89.36.582.359 1.278v2.29zm14.727 0v-2.454q0-.9-.5-1.728-.503-.829-1.422-1.422 1.043.123 1.963.42.92.296 1.718.726.736.41 1.125.91.39.501.389 1.094v2.455zm-8.182-6.544q-1.35 0-2.31-.962a3.15 3.15 0 0 1-.962-2.311q0-1.35.961-2.312A3.15 3.15 0 0 1 9.545 5q1.35 0 2.312.961.96.962.961 2.312 0 1.35-.961 2.311-.962.962-2.312.962m8.182-3.273q0 1.35-.961 2.311-.961.962-2.311.962-.225 0-.573-.051a5 5 0 0 1-.573-.113q.552-.655.849-1.452a4.7 4.7 0 0 0 .297-1.657 4.7 4.7 0 0 0-.297-1.657 4.9 4.9 0 0 0-.849-1.452q.287-.103.573-.134.286-.03.572-.03 1.35 0 2.312.961.96.962.961 2.312m-13.09 8.182h9.817V15.8a.77.77 0 0 0-.112-.41.8.8 0 0 0-.296-.286 10.7 10.7 0 0 0-2.23-.828 9.5 9.5 0 0 0-4.541 0q-1.125.276-2.23.829a.8.8 0 0 0-.409.695zm4.908-6.546q.675 0 1.156-.481.48-.48.48-1.155t-.48-1.156a1.58 1.58 0 0 0-1.156-.48q-.675 0-1.155.48t-.48 1.156.48 1.155q.48.48 1.155.481" />
  </svg>
);
SvgUsers.displayName = 'SvgUsers';
const UsersIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgUsers {...props} className={createClass(getIconStyles(props))} />
    )}
  </ClassNames>
);
UsersIcon.displayName = 'UsersIcon';
export default UsersIcon;

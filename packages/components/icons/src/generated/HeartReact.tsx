// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/heart.react.svg
/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error'
    | 'success';
  /**
   * The size of the icon. 'small', 'medium', 'big' have been deprecated in favor of '10', '20', '30', '40'.
   */
  size?: 'small' | 'medium' | 'big' | 'scale' | '10' | '20' | '30' | '40';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
  '10': 12,
  '20': 16,
  '30': 20,
  '40': 24,
} as const;
const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };
    case 'small':
    case 'medium':
    case 'big':
    case '10':
    case '20':
    case '30':
    case '40':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };
    default:
      return {
        width: `${iconSizes['40']}px`,
        height: `${iconSizes['40']}px`,
      };
  }
};
const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);
  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;
    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};
const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designTokens.colorError;
      break;
    case 'success':
      iconColor = designTokens.colorSuccess;
      break;
    default:
      break;
  }
  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }
  return iconColor;
};
export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;
const SvgHeart = (props: SVGProps) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width={24}
    height={24}
    viewBox="0 0 24 24"
    role="img"
    {...props}
  >
    <path d="m9.785 18.085-1.553-1.418a61 61 0 0 1-4.308-4.331Q2 10.188 2 7.6q0-2.115 1.418-3.533Q4.834 2.65 6.95 2.65q1.193 0 2.25.506 1.057.507 1.8 1.384a5.4 5.4 0 0 1 1.8-1.384 5.15 5.15 0 0 1 2.25-.506q2.115 0 3.532 1.417Q20 5.485 20 7.6q0 2.588-1.913 4.748a54 54 0 0 1-4.342 4.342l-1.53 1.395A1.7 1.7 0 0 1 11 18.58a1.7 1.7 0 0 1-1.215-.495m.36-11.745q-.652-.922-1.395-1.407-.742-.483-1.8-.483-1.35 0-2.25.9T3.8 7.6q0 1.17.833 2.486.832 1.317 1.991 2.554a34 34 0 0 0 2.385 2.317q1.226 1.08 1.991 1.778.765-.697 1.992-1.777a35 35 0 0 0 2.385-2.318 17 17 0 0 0 1.99-2.554Q18.2 8.77 18.2 7.6q0-1.35-.9-2.25t-2.25-.9q-1.058 0-1.8.483-.742.485-1.395 1.407a1.02 1.02 0 0 1-.855.45q-.247 0-.473-.113a1 1 0 0 1-.382-.337" />
  </svg>
);
SvgHeart.displayName = 'SvgHeart';
const HeartIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgHeart {...props} className={createClass(getIconStyles(props))} />
    )}
  </ClassNames>
);
HeartIcon.displayName = 'HeartIcon';
export default HeartIcon;

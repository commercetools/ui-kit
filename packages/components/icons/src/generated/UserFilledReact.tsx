// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/user-filled.react.svg
/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error';
  size?: 'small' | 'medium' | 'big' | 'scale';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
} as const;
const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };
    case 'small':
    case 'medium':
    case 'big':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };
    default:
      return {
        width: `${iconSizes.big}px`,
        height: `${iconSizes.big}px`,
      };
  }
};
const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);
  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;
    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};
const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designTokens.colorError;
      break;
    default:
      break;
  }
  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }
  return iconColor;
};
export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;
const SvgUserFilled = (props: SVGProps) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width={24}
    height={24}
    viewBox="0 0 24 24"
    role="img"
    {...props}
  >
    <path d="M13 13c-1.238 0-2.297-.44-3.178-1.322C8.94 10.797 8.5 9.738 8.5 8.5c0-1.237.44-2.297 1.322-3.178C10.703 4.44 11.762 4 13 4s2.297.44 3.178 1.322c.881.881 1.322 1.94 1.322 3.178s-.44 2.297-1.322 3.178C15.297 12.56 14.238 13 13 13Zm-6.75 9c-.619 0-1.148-.22-1.588-.66A2.167 2.167 0 0 1 4 19.75v-.9c0-.638.164-1.224.493-1.758A3.277 3.277 0 0 1 5.8 15.869a16.722 16.722 0 0 1 3.544-1.309c1.2-.29 2.418-.435 3.656-.435s2.456.145 3.656.435c1.2.291 2.382.727 3.544 1.309.544.281.98.689 1.307 1.223.329.534.493 1.12.493 1.758v.9a2.17 2.17 0 0 1-.66 1.59c-.441.44-.971.66-1.59.66H6.25Z" />
  </svg>
);
SvgUserFilled.displayName = 'SvgUserFilled';
const UserFilledIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgUserFilled {...props} className={createClass(getIconStyles(props))} />
    )}
  </ClassNames>
);
UserFilledIcon.displayName = 'UserFilledIcon';
export default UserFilledIcon;

// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/plugin.react.svg

/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error';
  size?: 'small' | 'medium' | 'big' | 'scale';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
} as const;

const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };

    case 'small':
    case 'medium':
    case 'big':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };

    default:
      return {
        width: `${iconSizes.big}px`,
        height: `${iconSizes.big}px`,
      };
  }
};

const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);

  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;

    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};

const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;

  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;

    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;

    case 'surface':
      iconColor = designTokens.colorSurface;
      break;

    case 'info':
      iconColor = designTokens.colorInfo;
      break;

    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;

    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;

    case 'warning':
      iconColor = designTokens.colorWarning;
      break;

    case 'error':
      iconColor = designTokens.colorError;
      break;

    default:
      break;
  }

  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }

  return iconColor;
};

export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;

const SvgPlugin = (props: SVGProps) => (
  <svg
    width={24}
    height={24}
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
    role="img"
    {...props}
  >
    <path d="M8.8 21H5c-.55 0-1.021-.196-1.413-.587A1.928 1.928 0 0 1 3 19v-3.8c.8 0 1.5-.254 2.1-.762.6-.509.9-1.155.9-1.938 0-.783-.3-1.43-.9-1.938A3.15 3.15 0 0 0 3 9.8V6c0-.55.196-1.02.587-1.412A1.927 1.927 0 0 1 5 4h4c0-.7.242-1.292.725-1.775.483-.483 1.075-.725 1.775-.725s1.292.242 1.775.725C13.758 2.708 14 3.3 14 4h4c.55 0 1.021.196 1.413.588.391.391.587.862.587 1.412v4c.7 0 1.292.242 1.775.725.483.483.725 1.075.725 1.775s-.242 1.292-.725 1.775C21.292 14.758 20.7 15 20 15v4c0 .55-.196 1.021-.587 1.413A1.928 1.928 0 0 1 18 21h-3.8c0-.833-.262-1.542-.787-2.125S12.25 18 11.5 18s-1.387.292-1.912.875C9.063 19.458 8.8 20.167 8.8 21ZM5 19h2.125c.4-1.1 1.042-1.875 1.925-2.325.883-.45 1.7-.675 2.45-.675.75 0 1.567.225 2.45.675.883.45 1.525 1.225 1.925 2.325H18v-6h2a.48.48 0 0 0 .35-.15.48.48 0 0 0 0-.7A.48.48 0 0 0 20 12h-2V6h-6V4a.48.48 0 0 0-.15-.35.48.48 0 0 0-.7 0A.48.48 0 0 0 11 4v2H5v2.2c.9.333 1.625.892 2.175 1.675.55.783.825 1.658.825 2.625 0 .95-.275 1.817-.825 2.6A4.666 4.666 0 0 1 5 16.8V19Z" />
  </svg>
);

SvgPlugin.displayName = 'SvgPlugin';

const PluginIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgPlugin {...props} className={createClass(getIconStyles(props))} />
    )}
  </ClassNames>
);

PluginIcon.displayName = 'PluginIcon';
export default PluginIcon;

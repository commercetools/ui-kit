// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/coins.react.svg

/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error';
  size?: 'small' | 'medium' | 'big' | 'scale';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
} as const;

const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };

    case 'small':
    case 'medium':
    case 'big':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };

    default:
      return {
        width: `${iconSizes.big}px`,
        height: `${iconSizes.big}px`,
      };
  }
};

const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);

  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;

    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};

const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;

  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;

    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;

    case 'surface':
      iconColor = designTokens.colorSurface;
      break;

    case 'info':
      iconColor = designTokens.colorInfo;
      break;

    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;

    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;

    case 'warning':
      iconColor = designTokens.colorWarning;
      break;

    case 'error':
      iconColor = designTokens.colorError;
      break;

    default:
      break;
  }

  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }

  return iconColor;
};

export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;

const SvgCoins = (props: SVGProps) => (
  <svg
    width={24}
    height={24}
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
    role="img"
    {...props}
  >
    <path d="M13.636 12.364c.682 0 1.262-.239 1.739-.716a2.367 2.367 0 0 0 .716-1.739c0-.682-.239-1.261-.716-1.739a2.367 2.367 0 0 0-1.739-.715c-.681 0-1.261.238-1.738.715a2.367 2.367 0 0 0-.716 1.74c0 .68.239 1.26.716 1.738a2.367 2.367 0 0 0 1.738.716ZM7.91 14.818c-.45 0-.835-.16-1.155-.48a1.574 1.574 0 0 1-.481-1.156V6.636c0-.45.16-.835.48-1.155C7.075 5.161 7.46 5 7.91 5h11.455c.45 0 .835.16 1.156.481.32.32.48.705.48 1.155v6.546c0 .45-.16.835-.48 1.155-.321.32-.706.481-1.156.481H7.909Zm-3.273 3.273c-.45 0-.835-.16-1.155-.48A1.576 1.576 0 0 1 3 16.454V8.274c0-.232.079-.427.236-.584a.791.791 0 0 1 .582-.234c.232 0 .426.078.584.234a.794.794 0 0 1 .234.584v8.181h13.091a.79.79 0 0 1 .583.236.79.79 0 0 1 .236.583.79.79 0 0 1-.236.582.79.79 0 0 1-.583.236H4.637ZM7.91 8.273c.45 0 .835-.16 1.155-.481.321-.32.481-.706.481-1.156H7.91v1.637Zm11.455 0V6.636h-1.637c0 .45.16.835.48 1.156.321.32.707.48 1.157.48ZM7.909 13.182h1.636c0-.45-.16-.835-.48-1.156-.32-.32-.706-.48-1.156-.48v1.636Zm9.818 0h1.637v-1.636c-.45 0-.836.16-1.157.48-.32.32-.48.706-.48 1.156Z" />
  </svg>
);

SvgCoins.displayName = 'SvgCoins';

const CoinsIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgCoins {...props} className={createClass(getIconStyles(props))} />
    )}
  </ClassNames>
);

CoinsIcon.displayName = 'CoinsIcon';
export default CoinsIcon;

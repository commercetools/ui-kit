// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/gear.react.svg
/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error'
    | 'success';
  /**
   * The size of the icon. 'small', 'medium', 'big' have been deprecated in favor of '10', '20', '30', '40'.
   */
  size?: 'small' | 'medium' | 'big' | 'scale' | '10' | '20' | '30' | '40';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
  '10': 12,
  '20': 16,
  '30': 20,
  '40': 24,
} as const;
const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };
    case 'small':
    case 'medium':
    case 'big':
    case '10':
    case '20':
    case '30':
    case '40':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };
    default:
      return {
        width: `${iconSizes['40']}px`,
        height: `${iconSizes['40']}px`,
      };
  }
};
const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);
  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;
    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};
const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designTokens.colorError;
      break;
    case 'success':
      iconColor = designTokens.colorSuccess;
      break;
    default:
      break;
  }
  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }
  return iconColor;
};
export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;
const SvgGear = (props: SVGProps) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width={24}
    height={24}
    viewBox="0 0 24 24"
    role="img"
    {...props}
  >
    <path d="M13.732 21.47h-3.464a.86.86 0 0 1-.6-.23.92.92 0 0 1-.3-.578l-.277-2.147q-.3-.116-.565-.277a8 8 0 0 1-.52-.346l-2.009.83a1.03 1.03 0 0 1-.646.024.86.86 0 0 1-.508-.393l-1.709-2.978a.87.87 0 0 1-.115-.646.9.9 0 0 1 .346-.555l1.732-1.316a2 2 0 0 1-.023-.312v-.623q0-.15.023-.311l-1.732-1.316a.89.89 0 0 1-.346-.554.87.87 0 0 1 .115-.647l1.709-2.978a.73.73 0 0 1 .496-.405q.335-.08.658.035l2.009.832q.255-.185.53-.347.278-.161.555-.277l.277-2.147a.92.92 0 0 1 .3-.577q.255-.231.6-.231h3.464q.345 0 .6.23a.92.92 0 0 1 .3.578l.277 2.147q.3.116.566.277t.52.347l2.008-.832q.322-.115.646-.023a.86.86 0 0 1 .508.393l1.709 2.978q.184.3.115.647a.89.89 0 0 1-.346.554l-1.732 1.316a2 2 0 0 1 .023.31v.624q0 .15-.046.312l1.732 1.316q.277.208.346.555a.87.87 0 0 1-.115.646l-1.709 2.955a.9.9 0 0 1-.519.405 1 1 0 0 1-.658-.012l-1.963-.831q-.255.184-.53.346-.278.162-.555.277l-.277 2.147a.92.92 0 0 1-.3.577.86.86 0 0 1-.6.231m-1.686-6.003q1.34 0 2.286-.946a3.12 3.12 0 0 0 .946-2.286q0-1.339-.946-2.286a3.12 3.12 0 0 0-2.286-.946q-1.362 0-2.298.946a3.14 3.14 0 0 0-.934 2.286q0 1.34.934 2.286.936.945 2.298.946m0-1.847q-.577 0-.98-.404a1.33 1.33 0 0 1-.405-.98q0-.579.404-.982.404-.405.981-.404.577 0 .982.404.403.404.403.981 0 .578-.403.98-.405.405-.982.405m-.97 6.003H12.9l.324-2.447q.716-.184 1.328-.543a5.5 5.5 0 0 0 1.119-.865l2.286.946.9-1.57-1.985-1.5q.114-.324.161-.682a5.7 5.7 0 0 0 0-1.455 3.3 3.3 0 0 0-.162-.68l1.986-1.501-.9-1.57-2.286.97a5.2 5.2 0 0 0-1.12-.89 5.2 5.2 0 0 0-1.327-.542l-.3-2.447H11.1l-.324 2.447q-.716.185-1.327.542a5.5 5.5 0 0 0-1.12.867l-2.286-.947-.9 1.57 1.986 1.478q-.115.345-.162.692a5.6 5.6 0 0 0 0 1.455q.046.345.162.692l-1.986 1.501.9 1.57 2.286-.97a5.1 5.1 0 0 0 2.447 1.432z" />
  </svg>
);
SvgGear.displayName = 'SvgGear';
const GearIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgGear {...props} className={createClass(getIconStyles(props))} />
    )}
  </ClassNames>
);
GearIcon.displayName = 'GearIcon';
export default GearIcon;

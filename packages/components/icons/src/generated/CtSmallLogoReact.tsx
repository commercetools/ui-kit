// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/svg/ct-small-logo.react.svg
/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error';
  size?: 'small' | 'medium' | 'big' | 'scale';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
} as const;
const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };
    case 'small':
    case 'medium':
    case 'big':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };
    default:
      return {
        width: `${iconSizes.big}px`,
        height: `${iconSizes.big}px`,
      };
  }
};
const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);
  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;
    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};
const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designTokens.colorError;
      break;
    default:
      break;
  }
  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }
  return iconColor;
};
export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;
const SvgCtSmallLogo = (props: SVGProps) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width={24}
    height={26}
    fill="none"
    viewBox="0 0 24 26"
    role="img"
    {...props}
  >
    <path
      fill="#fff"
      d="m22.498 19.395-10.36-4.768c-.072-.033-.144-.057-.217-.082v-2.843c0-.235 0-.235.153-.309l.41-.186c.693-.317.693-.317 4.782-2.21l5.24-2.42c.33-.155.54-.48.54-.838 0-.357-.21-.69-.54-.836L12.146.134a1.5 1.5 0 0 0-1.24 0L.548 4.894a.93.93 0 0 0-.539.764H0v14.566c0 .357.21.682.54.837l10.375 4.8s.306.139.628.139c.266 0 .54-.098.62-.138l10.343-4.785c.33-.154.54-.48.54-.837a.95.95 0 0 0-.548-.845ZM.797 5.723c0-.049.032-.097.08-.122L11.237.85a.7.7 0 0 1 .572 0l10.36 4.769c.047.024.08.073.08.121a.142.142 0 0 1-.08.122l-5.241 2.421c-4.081 1.893-4.081 1.893-4.781 2.21l-.387.178c-.024.009-.048.017-.08.025l-.032.008c-.04.008-.081.008-.121.008a.617.617 0 0 1-.274-.065L.877 5.845c-.016-.008-.024-.016-.032-.016a.131.131 0 0 1-.048-.106Zm21.444 14.51a.142.142 0 0 1-.081.121L11.913 25.09V15.4l10.247 4.72c.048.016.08.064.08.113ZM.797 6.681l10.118 4.679c.072.032.145.057.225.081a2.347 2.347 0 0 0-.016.26v2.844c-.08.024-.153.048-.217.08l-10.11 4.64V6.681Zm.08 13.656a.142.142 0 0 1-.08-.122c0-.016 0-.024.008-.04.008-.033.04-.066.072-.082l10.247-4.704v9.684L.877 20.338Z"
    />
  </svg>
);
SvgCtSmallLogo.displayName = 'SvgCtSmallLogo';
const CtSmallLogoIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgCtSmallLogo
        {...props}
        className={createClass(getIconStyles(props))}
      />
    )}
  </ClassNames>
);
CtSmallLogoIcon.displayName = 'CtSmallLogoIcon';
export default CtSmallLogoIcon;

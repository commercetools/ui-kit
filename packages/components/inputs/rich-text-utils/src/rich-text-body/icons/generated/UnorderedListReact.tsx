// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file is created with 'yarn generate-icons'.
// Original SVG file: src/rich-text-body/icons/svg/unordered-list.react.svg
/* eslint-disable @typescript-eslint/no-unused-vars */
import { warning } from '@commercetools-uikit/utils';
import { css, ClassNames } from '@emotion/react';
import { designTokens } from '@commercetools-uikit/design-system';
export type Props = {
  color?:
    | 'solid'
    | 'neutral60'
    | 'surface'
    | 'info'
    | 'primary'
    | 'primary40'
    | 'warning'
    | 'error'
    | 'success';
  /**
   * The size of the icon. 'small', 'medium', 'big' have been deprecated in favor of '10', '20', '30', '40'.
   */
  size?: 'small' | 'medium' | 'big' | 'scale' | '10' | '20' | '30' | '40';
};
export type SVGProps = Props & {
  className: string;
};
const iconSizes = {
  small: 12,
  medium: 16,
  big: 24,
  '10': 12,
  '20': 16,
  '30': 20,
  '40': 24,
} as const;
const getSizeDimensions = (size: Props['size']) => {
  switch (size) {
    case 'scale':
      return {
        width: '100%',
        height: 'auto',
      };
    case 'small':
    case 'medium':
    case 'big':
    case '10':
    case '20':
    case '30':
    case '40':
      return {
        width: `${iconSizes[size]}px`,
        height: `${iconSizes[size]}px`,
      };
    default:
      return {
        width: `${iconSizes['40']}px`,
        height: `${iconSizes['40']}px`,
      };
  }
};
const getSizeStyle = (size: Props['size']) => {
  const dimensions = getSizeDimensions(size);
  switch (size) {
    case 'scale':
      return `
        &:not(:root) {
          width: ${dimensions.width};
          height: ${dimensions.height};
        }
      `;
    default:
      return `
        width: ${dimensions.width};
        height: ${dimensions.height};
      `;
  }
};
const getColor = (color: Props['color']) => {
  if (!color) return 'inherit';
  let iconColor;
  switch (color) {
    case 'solid':
      iconColor = designTokens.colorSolid;
      break;
    case 'neutral60':
      iconColor = designTokens.colorNeutral60;
      break;
    case 'surface':
      iconColor = designTokens.colorSurface;
      break;
    case 'info':
      iconColor = designTokens.colorInfo;
      break;
    case 'primary':
      iconColor = designTokens.colorPrimary;
      break;
    case 'primary40':
      iconColor = designTokens.colorPrimary40;
      break;
    case 'warning':
      iconColor = designTokens.colorWarning;
      break;
    case 'error':
      iconColor = designTokens.colorError;
      break;
    case 'success':
      iconColor = designTokens.colorSuccess;
      break;
    default:
      break;
  }
  if (!iconColor) {
    warning(
      color,
      `ui-kit/Icon: the specified color '${color}' is not supported.`
    );
    return 'inherit';
  }
  return iconColor;
};
export const getIconStyles = (props: Props) => css`
  *:not([fill='none']) {
    fill: ${getColor(props.color)};
  }
  &,
  image {
    ${getSizeStyle(props.size)};
  }
  flex-shrink: 0;
`;
const SvgUnorderedList = (props: SVGProps) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    xmlnsXlink="http://www.w3.org/1999/xlink"
    width={24}
    height={24}
    viewBox="0 0 24 24"
    role="img"
    {...props}
  >
    <defs>
      <path
        id="unordered-list_react_svg__a"
        d="M5.625 17a.36.36 0 0 1 .264.111q.083.085.104.19l.007.074v2.25a.36.36 0 0 1-.111.264.36.36 0 0 1-.19.104L5.625 20h-2.25a.36.36 0 0 1-.264-.111.36.36 0 0 1-.104-.19L3 19.625v-2.25a.36.36 0 0 1 .111-.264.37.37 0 0 1 .19-.104L3.375 17zm15.125 1a.4.4 0 0 1 .176.037.14.14 0 0 1 .066.056l.008.032v.75q0 .05-.074.088a.4.4 0 0 1-.111.033L20.75 19h-10.5a.4.4 0 0 1-.176-.037.14.14 0 0 1-.066-.056L10 18.875v-.75q0-.05.074-.088a.4.4 0 0 1 .111-.033L10.25 18zM5.625 10a.36.36 0 0 1 .264.111q.083.084.104.19l.007.074v2.25a.36.36 0 0 1-.111.264.37.37 0 0 1-.19.104L5.625 13h-2.25a.36.36 0 0 1-.264-.111.36.36 0 0 1-.104-.19L3 12.625v-2.25a.36.36 0 0 1 .111-.264.36.36 0 0 1 .19-.104L3.375 10zm15.125 1a.4.4 0 0 1 .176.037q.075.037.074.088v.75q0 .05-.074.088a.4.4 0 0 1-.176.037h-10.5a.4.4 0 0 1-.176-.037Q10 11.926 10 11.875v-.75q0-.05.074-.088A.4.4 0 0 1 10.25 11ZM5.625 4q.153 0 .264.111.083.085.104.19L6 4.375v2.25a.36.36 0 0 1-.111.264.36.36 0 0 1-.19.104L5.625 7h-2.25a.36.36 0 0 1-.264-.111.36.36 0 0 1-.104-.19L3 6.625v-2.25a.36.36 0 0 1 .111-.264.36.36 0 0 1 .19-.104L3.375 4zm4.625 1h10.5a.4.4 0 0 1 .176.037.14.14 0 0 1 .066.056l.008.032v.75q0 .05-.074.088a.4.4 0 0 1-.111.033L20.75 6h-10.5a.4.4 0 0 1-.176-.037.14.14 0 0 1-.066-.056L10 5.875v-.75q0-.05.074-.088a.4.4 0 0 1 .111-.033zh10.5Z"
      />
    </defs>
    <use
      xlinkHref="#unordered-list_react_svg__a"
      fill="#1A1A1A"
      fillRule="evenodd"
    />
  </svg>
);
SvgUnorderedList.displayName = 'SvgUnorderedList';
const UnorderedListIcon = (props: Props) => (
  <ClassNames>
    {({ css: createClass }) => (
      <SvgUnorderedList
        {...props}
        className={createClass(getIconStyles(props))}
      />
    )}
  </ClassNames>
);
UnorderedListIcon.displayName = 'UnorderedListIcon';
export default UnorderedListIcon;

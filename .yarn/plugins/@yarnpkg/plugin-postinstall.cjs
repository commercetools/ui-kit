/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-postinstall",
factory: function (require) {
var plugin=(()=>{var w=Object.create,c=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var C=Object.getOwnPropertyNames;var P=Object.getPrototypeOf,N=Object.prototype.hasOwnProperty;var S=t=>c(t,"__esModule",{value:!0});var n=t=>{if(typeof require!="undefined")return require(t);throw new Error('Dynamic require of "'+t+'" is not supported')};var E=(t,e)=>{for(var o in e)c(t,o,{get:e[o],enumerable:!0})},T=(t,e,o)=>{if(e&&typeof e=="object"||typeof e=="function")for(let a of C(e))!N.call(t,a)&&a!=="default"&&c(t,a,{get:()=>e[a],enumerable:!(o=x(e,a))||o.enumerable});return t},i=t=>T(S(c(t!=null?w(P(t)):{},"default",t&&t.__esModule&&"default"in t?{get:()=>t.default,enumerable:!0}:{value:t,enumerable:!0})),t);var R={};E(R,{default:()=>A});var s=i(n("@yarnpkg/core")),k=i(n("@yarnpkg/cli")),h=i(n("clipanion"));var u=i(n("@yarnpkg/core")),d={postinstall:{description:"Postinstall hook that will always run in Yarn v2+",type:u.SettingsType.STRING,default:""}};var y=i(n("@yarnpkg/shell")),r=i(n("@yarnpkg/core")),f=async(t,e)=>{await e.report.startTimerPromise("Postinstall step",async()=>{if(process.env.YARN_ENABLE_SCRIPTS==="0"){let m=r.formatUtils.pretty(t.configuration,"YARN_ENABLE_SCRIPTS=0",r.formatUtils.Type.CODE);e.report.reportWarning(r.MessageName.UNNAMED,`Skipping postinstall because of ${m}`);return}switch(e.mode){case r.InstallMode.SkipBuild:case r.InstallMode.UpdateLockfile:{let m=r.formatUtils.pretty(t.configuration,`--mode=${e==null?void 0:e.mode}`,r.formatUtils.Type.CODE);e.report.reportWarning(r.MessageName.UNNAMED,`Skipping postinstall because of ${m}`);return}default:break}let o=t.configuration.get("postinstall"),a=r.formatUtils.pretty(t.configuration,o,r.formatUtils.Type.CODE),l=r.formatUtils.pretty(t.configuration,"workspace root",r.formatUtils.Type.PATH);e.report.reportInfo(r.MessageName.UNNAMED,`Running command ${a} from the ${l}...`),e.report.reportSeparator();let g=await(0,y.execute)(o,[],{cwd:t.cwd,stdout:e.report.createStreamReporter()});if(e.report.reportSeparator(),g!==0)throw new Error(`The postinstall command failed with exit code ${g}`)})};var p=class extends k.BaseCommand{async execute(){let e=await s.Configuration.find(this.context.cwd,this.context.plugins),{project:o}=await s.Project.find(e,this.context.cwd);return(await s.StreamReport.start({configuration:e,stdout:this.context.stdout},async l=>{await f(o,{cache:null,report:l})})).exitCode()}};p.paths=[["postinstall"]],p.usage=h.Command.Usage({description:'Manually trigger the "postinstall" command'});var M={configuration:d,commands:[p],hooks:{afterAllInstalled:f}},A=M;return R;})();
return plugin;
}
};

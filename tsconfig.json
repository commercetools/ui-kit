{
  "compilerOptions": {
    "allowSyntheticDefaultImports": true,
    "emitDecoratorMetadata": false,
    "experimentalDecorators": false,
    "esModuleInterop": true,
    "importHelpers": true,
    // See https://devblogs.microsoft.com/typescript/typescript-and-babel-7/
    "isolatedModules": true,
    "jsx": "react-jsx",
    "jsxImportSource": "@emotion/react",
    "lib": ["ESNext", "DOM"],
    "module": "ESNext",
    "moduleResolution": "Node",
    "noFallthroughCasesInSwitch": true,
    "noImplicitAny": true,
    "noImplicitReturns": true,
    "resolveJsonModule": true,
    "noImplicitThis": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "preserveSymlinks": true,
    "pretty": true,
    "removeComments": true,
    "sourceMap": true,
    "strict": true,
    "strictNullChecks": true,
    "stripInternal": true,
    "target": "ES2019",
    "allowJs": true,
    "typeRoots": [
      "@types",
      // "@types-extensions",
      "node_modules/@types"
    ],
    // FIXME: Somehow TS picks some of the types from the docs/storybook
    // which might contain outdated packages (e.g. Emotion).
    // As a workaround, we can map the affected imports to point to the main node_modules.
    "paths": {
      // Original: docs/node_modules/@storybook/api/node_modules/@emotion/core/types/index.d.ts
      // Since `@emotion/core` does not exist anymore, let's resolve it to `@emotion/react`.
      "@emotion/core": ["./node_modules/@emotion/react"]
    }
  }
}

const fs = require('fs');
const path = require('path');
const prettier = require('prettier');
const rcfile = require('rcfile');
const postcss = require('postcss');
const postcssDiscardComments = require('postcss-discard-comments');
const postcssColorModFunction = require('postcss-color-mod-function');
const postcssCustomProperties = require('postcss-custom-properties');
const cssvariables = require('postcss-css-variables');
const postcssImport = require('postcss-import');

const relativePath = path.join(__dirname, '../materials/internals');
const exportPath = path.join(__dirname, '../materials');
const importPath = path.join(__dirname, '../materials/internals/index.css');

const css = fs.readFileSync(importPath, 'utf8');

const commentDoNotModify = `/*
  THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
  This file is created by the 'scripts/extract-materials.js' script.
  The real values of the variables should be updated in '${path.relative(
    process.cwd(),
    relativePath
  )}'
*/
`;

postcss([
  postcssImport(),
  postcssDiscardComments(),
  postcssColorModFunction(),
  // to transform the imported :roots to actual values
  cssvariables({
    preserve: 'computed',
  }),
  // to export variables to css and js files
  postcssCustomProperties({
    preserve: false,
    exportTo: [
      // export as JSON
      customProperties =>
        fs.writeFileSync(
          `${exportPath}/custom-properties.json`,
          JSON.stringify(customProperties, null, 2)
        ),
      // export as formatted CSS
      customProperties => {
        const formatDeclaration = ([property, value]) =>
          `${property}: ${value};`;
        const exportedCss = `
          ${commentDoNotModify}
          :root{
            ${Object.entries(customProperties)
              .map(formatDeclaration)
              .join('\n')}
            }
            `;

        // write the CSS file with prettier formatting
        const prettierConfig = rcfile('prettier');
        fs.writeFileSync(
          path.join(exportPath, 'custom-properties.css'),
          prettier.format(exportedCss, { ...prettierConfig, parser: 'scss' })
        );
      },
    ],
  }),
])
  .process(css, { from: importPath })
  .catch(err => {
    // eslint-disable-next-line no-console
    console.log(`Error extracting css`, err);
  });

#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { cac } from 'cac';
import { execa } from 'execa';
import { getPackagesSync } from '@manypkg/get-packages';

const cli = cac('check-ts-migration');

const issueTitle = 'TypeScript migration overview';

const execute = async () => {
  cli
    .command('', 'Check typescript migration status')
    .option(
      '--dry-run',
      '(optional) Simulate a run, the generated content will be printed to stdout.'
    )
    .action(async (options) => {
      const dryRun = options.dryRun;

      if (!dryRun) {
        const result = await execa('gh', ['--version']);
        if (result.failed) {
          throw new Error(
            'Missing required binary "gh". Make sure it is installed.'
          );
        }
      }

      const workspacePackages = getPackagesSync(process.cwd());
      const publicPackages = workspacePackages.packages.filter(
        (packageInfo) => !packageInfo.packageJson.private
      );

      const stats = publicPackages.reduce(
        (stats, packageInfo) => {
          const entryPointPath = path.join(packageInfo.dir, 'src/index.ts');
          const isTS = fs.existsSync(entryPointPath);

          return {
            migrated: isTS ? stats.migrated + 1 : stats.migrated,
            pending: isTS ? stats.pending : stats.pending + 1,
            pendingPackages: [
              ...stats.pendingPackages,
              isTS
                ? null
                : {
                    name: packageInfo.packageJson.name,
                    dir: path.relative(process.cwd(), packageInfo.dir),
                  },
            ].filter(Boolean),
          };
        },
        {
          migrated: 0,
          pending: 0,
          pendingPackages: [],
        }
      );

      const percentageCompleted = Math.floor(
        (stats.migrated * 100) / publicPackages.length
      );

      const statsMd = `<!-- This is autogenerated issue. See ./scripts/check-ts-migration.mjs -->
## Progress

![${percentageCompleted}%](https://progress-bar.dev/${percentageCompleted})

**${stats.migrated} out of ${
        publicPackages.length
      } packages** have been migrated to TypeScript.

## Pending migration

The following **${
        stats.pending
      } packages** have not been migrated to TypeScript yet:

| Package | Location |
| --- | --- |
${stats.pendingPackages
  .map(
    (packageInfo) =>
      `| \`${packageInfo.name}\` | [${packageInfo.dir}](https://github.com/commercetools/ui-kit/tree/main/${packageInfo.dir}) |`
  )
  .join('\n')}
  `;

      if (dryRun) {
        console.log(statsMd);
        process.exit(0);
      }

      // Push stats to repository
      const resultGhIssueRaw = await execa('gh', [
        'issue',
        'list',
        '--search',
        `"${issueTitle}"`,
        '--json',
        'number',
      ]);
      const resultGhIssue = JSON.parse(resultGhIssueRaw.stdout);

      if (resultGhIssue.length === 0) {
        // Create a new issue
        await execa('gh', [
          'issue',
          'create',
          '--title',
          issueTitle,
          '--body',
          statsMd,
        ]);
      } else {
        const [issue] = resultGhIssue;
        // Update existing issue
        await execa('gh', [
          'issue',
          'edit',
          issue.number,
          '--title',
          `${issueTitle} (\`${percentageCompleted}%\` completed)`,
          '--body',
          statsMd,
        ]);
      }
    });

  cli.help();

  cli.parse();
};

execute().catch((error) => {
  console.error(error.message || error);
  process.exit(1);
});
